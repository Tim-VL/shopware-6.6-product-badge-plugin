{"version":3,"file":"static/js/swag-product-badges.js","mappings":"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","sources":["webpack://administration/../../../../../../custom/plugins/SwagProductBadges/src/Resources/app/administration/src/module/swag-product-badges/component/swag-product-badges-assignment/swag-product-badges-assignment.scss?1889","webpack://administration/../../../../../../custom/plugins/SwagProductBadges/src/Resources/app/administration/src/module/swag-product-badges/page/swag-product-badges-detail/swag-product-badges-detail.scss?474d","webpack://administration/../../../../../../custom/plugins/SwagProductBadges/src/Resources/app/administration/src/module/swag-product-badges/page/swag-product-badges-list/swag-product-badges-list.scss?7e79","webpack://administration/../../../../../../custom/plugins/SwagProductBadges/src/Resources/app/administration/src/view/sw-product-detail-badges/sw-product-detail-badges.scss?ac22","webpack://administration/./node_modules/vue-style-loader/lib/listToStyles.js","webpack://administration/./node_modules/vue-style-loader/lib/addStylesClient.js","webpack://administration/webpack/bootstrap","webpack://administration/webpack/runtime/define property getters","webpack://administration/webpack/runtime/hasOwnProperty shorthand","webpack://administration/webpack/runtime/publicPath","webpack://administration/data:text/javascript;charset=utf-8;base64,CiAgICAgICAgICAgIGlmICh3aW5kb3c/Ll9fc3dfXz8uYXNzZXRQYXRoKSB7CiAgICAgICAgICAgICAgICBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyA9IHdpbmRvdy5fX3N3X18uYXNzZXRQYXRoICsgJy9idW5kbGVzL3N3YWdwcm9kdWN0YmFkZ2VzLyc7CiAgICAgICAgICAgIH0KICAgICAgICA=","webpack://administration/../../../../../../custom/plugins/SwagProductBadges/src/Resources/app/administration/src/core/product-badge-api.service.js","webpack://administration/../../../../../../custom/plugins/SwagProductBadges/src/Resources/app/administration/src/init/api-service.init.js","webpack://administration/../../../../../../custom/plugins/SwagProductBadges/src/Resources/app/administration/src/module/swag-product-badges/page/swag-product-badges-list/index.js","webpack://administration/../../../../../../custom/plugins/SwagProductBadges/src/Resources/app/administration/src/module/swag-product-badges/page/swag-product-badges-list/swag-product-badges-list.html.twig","webpack://administration/../../../../../../custom/plugins/SwagProductBadges/src/Resources/app/administration/src/module/swag-product-badges/page/swag-product-badges-detail/index.js","webpack://administration/../../../../../../custom/plugins/SwagProductBadges/src/Resources/app/administration/src/module/swag-product-badges/page/swag-product-badges-detail/swag-product-badges-detail.html.twig","webpack://administration/../../../../../../custom/plugins/SwagProductBadges/src/Resources/app/administration/src/module/swag-product-badges/component/swag-product-badges-assignment/index.js","webpack://administration/../../../../../../custom/plugins/SwagProductBadges/src/Resources/app/administration/src/module/swag-product-badges/component/swag-product-badges-assignment/swag-product-badges-assignment.html.twig","webpack://administration/../../../../../../custom/plugins/SwagProductBadges/src/Resources/app/administration/src/module/swag-product-badges/index.js","webpack://administration/../../../../../../custom/plugins/SwagProductBadges/src/Resources/app/administration/src/page/sw-product-detail/index.js","webpack://administration/../../../../../../custom/plugins/SwagProductBadges/src/Resources/app/administration/src/page/sw-product-detail/sw-product-detail.html.twig","webpack://administration/../../../../../../custom/plugins/SwagProductBadges/src/Resources/app/administration/src/view/sw-product-detail-badges/index.js","webpack://administration/../../../../../../custom/plugins/SwagProductBadges/src/Resources/app/administration/src/view/sw-product-detail-badges/sw-product-detail-badges.html.twig","webpack://administration/../../../../../../custom/plugins/SwagProductBadges/src/Resources/app/administration/src/main.js"],"sourcesContent":["// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ruleSet[1].rules[12].use[1]!../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[12].use[2]!../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[12].use[3]!./swag-product-badges-assignment.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"a997dc22\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ruleSet[1].rules[12].use[1]!../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[12].use[2]!../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[12].use[3]!./swag-product-badges-detail.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"3a810405\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ruleSet[1].rules[12].use[1]!../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[12].use[2]!../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[12].use[3]!./swag-product-badges-list.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"3538abf2\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ruleSet[1].rules[12].use[1]!../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[12].use[2]!../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[12].use[3]!./sw-product-detail-badges.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"a37da9ec\", content, true, {});","/**\n * Translates the list format produced by css-loader into something\n * easier to manipulate.\n */\nexport default function listToStyles (parentId, list) {\n  var styles = []\n  var newStyles = {}\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i]\n    var id = item[0]\n    var css = item[1]\n    var media = item[2]\n    var sourceMap = item[3]\n    var part = {\n      id: parentId + ':' + i,\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    }\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = { id: id, parts: [part] })\n    } else {\n      newStyles[id].parts.push(part)\n    }\n  }\n  return styles\n}\n","/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n  Modified by Evan You @yyx990803\n*/\n\nimport listToStyles from './listToStyles'\n\nvar hasDocument = typeof document !== 'undefined'\n\nif (typeof DEBUG !== 'undefined' && DEBUG) {\n  if (!hasDocument) {\n    throw new Error(\n    'vue-style-loader cannot be used in a non-browser environment. ' +\n    \"Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\"\n  ) }\n}\n\n/*\ntype StyleObject = {\n  id: number;\n  parts: Array<StyleObjectPart>\n}\n\ntype StyleObjectPart = {\n  css: string;\n  media: string;\n  sourceMap: ?string\n}\n*/\n\nvar stylesInDom = {/*\n  [id: number]: {\n    id: number,\n    refs: number,\n    parts: Array<(obj?: StyleObjectPart) => void>\n  }\n*/}\n\nvar head = hasDocument && (document.head || document.getElementsByTagName('head')[0])\nvar singletonElement = null\nvar singletonCounter = 0\nvar isProduction = false\nvar noop = function () {}\nvar options = null\nvar ssrIdKey = 'data-vue-ssr-id'\n\n// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n// tags it will allow on a page\nvar isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase())\n\nexport default function addStylesClient (parentId, list, _isProduction, _options) {\n  isProduction = _isProduction\n\n  options = _options || {}\n\n  var styles = listToStyles(parentId, list)\n  addStylesToDom(styles)\n\n  return function update (newList) {\n    var mayRemove = []\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i]\n      var domStyle = stylesInDom[item.id]\n      domStyle.refs--\n      mayRemove.push(domStyle)\n    }\n    if (newList) {\n      styles = listToStyles(parentId, newList)\n      addStylesToDom(styles)\n    } else {\n      styles = []\n    }\n    for (var i = 0; i < mayRemove.length; i++) {\n      var domStyle = mayRemove[i]\n      if (domStyle.refs === 0) {\n        for (var j = 0; j < domStyle.parts.length; j++) {\n          domStyle.parts[j]()\n        }\n        delete stylesInDom[domStyle.id]\n      }\n    }\n  }\n}\n\nfunction addStylesToDom (styles /* Array<StyleObject> */) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i]\n    var domStyle = stylesInDom[item.id]\n    if (domStyle) {\n      domStyle.refs++\n      for (var j = 0; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j])\n      }\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j]))\n      }\n      if (domStyle.parts.length > item.parts.length) {\n        domStyle.parts.length = item.parts.length\n      }\n    } else {\n      var parts = []\n      for (var j = 0; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j]))\n      }\n      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }\n    }\n  }\n}\n\nfunction createStyleElement () {\n  var styleElement = document.createElement('style')\n  styleElement.type = 'text/css'\n  head.appendChild(styleElement)\n  return styleElement\n}\n\nfunction addStyle (obj /* StyleObjectPart */) {\n  var update, remove\n  var styleElement = document.querySelector('style[' + ssrIdKey + '~=\"' + obj.id + '\"]')\n\n  if (styleElement) {\n    if (isProduction) {\n      // has SSR styles and in production mode.\n      // simply do nothing.\n      return noop\n    } else {\n      // has SSR styles but in dev mode.\n      // for some reason Chrome can't handle source map in server-rendered\n      // style tags - source maps in <style> only works if the style tag is\n      // created and inserted dynamically. So we remove the server rendered\n      // styles and inject new ones.\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  if (isOldIE) {\n    // use singleton mode for IE9.\n    var styleIndex = singletonCounter++\n    styleElement = singletonElement || (singletonElement = createStyleElement())\n    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)\n    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)\n  } else {\n    // use multi-style-tag mode in all other cases\n    styleElement = createStyleElement()\n    update = applyToTag.bind(null, styleElement)\n    remove = function () {\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  update(obj)\n\n  return function updateStyle (newObj /* StyleObjectPart */) {\n    if (newObj) {\n      if (newObj.css === obj.css &&\n          newObj.media === obj.media &&\n          newObj.sourceMap === obj.sourceMap) {\n        return\n      }\n      update(obj = newObj)\n    } else {\n      remove()\n    }\n  }\n}\n\nvar replaceText = (function () {\n  var textStore = []\n\n  return function (index, replacement) {\n    textStore[index] = replacement\n    return textStore.filter(Boolean).join('\\n')\n  }\n})()\n\nfunction applyToSingletonTag (styleElement, index, remove, obj) {\n  var css = remove ? '' : obj.css\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = replaceText(index, css)\n  } else {\n    var cssNode = document.createTextNode(css)\n    var childNodes = styleElement.childNodes\n    if (childNodes[index]) styleElement.removeChild(childNodes[index])\n    if (childNodes.length) {\n      styleElement.insertBefore(cssNode, childNodes[index])\n    } else {\n      styleElement.appendChild(cssNode)\n    }\n  }\n}\n\nfunction applyToTag (styleElement, obj) {\n  var css = obj.css\n  var media = obj.media\n  var sourceMap = obj.sourceMap\n\n  if (media) {\n    styleElement.setAttribute('media', media)\n  }\n  if (options.ssrId) {\n    styleElement.setAttribute(ssrIdKey, obj.id)\n  }\n\n  if (sourceMap) {\n    // https://developer.chrome.com/devtools/docs/javascript-debugging\n    // this makes source maps inside style tags work properly in Chrome\n    css += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */'\n    // http://stackoverflow.com/a/26603875\n    css += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'\n  }\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild)\n    }\n    styleElement.appendChild(document.createTextNode(css))\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","__webpack_require__.p = \"bundles/swagproductbadges/\";","\n            if (window?.__sw__?.assetPath) {\n                __webpack_public_path__ = window.__sw__.assetPath + '/bundles/swagproductbadges/';\n            }\n        ","const { ApiService } = Shopware.Classes;\n\nclass ProductBadgeApiService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'product-badge') {\n        super(httpClient, loginService, apiEndpoint);\n    }\n\n    getBadgesForProduct(productId) {\n        return this.httpClient\n            .get(`${this.getApiBasePath()}/product/${productId}`, {\n                headers: this.getBasicHeaders()\n            })\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    // Get all product badges\n    getBadges(criteria = null) {\n        const apiRoute = `${this.getApiBasePath()}`;\n        const headers = this.getBasicHeaders();\n        \n        let url = apiRoute;\n        if (criteria) {\n            const params = new URLSearchParams();\n            Object.keys(criteria).forEach(key => {\n                if (criteria[key] !== null && criteria[key] !== undefined) {\n                    params.append(key, criteria[key]);\n                }\n            });\n            if (params.toString()) {\n                url += '?' + params.toString();\n            }\n        }\n\n        return this.httpClient.get(url, { headers }).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    // Get single product badge\n    getBadge(id) {\n        const apiRoute = `${this.getApiBasePath()}/${id}`;\n        const headers = this.getBasicHeaders();\n        \n        return this.httpClient.get(apiRoute, { headers }).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    // Create product badge\n    createBadge(data) {\n        const apiRoute = `${this.getApiBasePath()}`;\n        const headers = this.getBasicHeaders();\n        \n        return this.httpClient.post(apiRoute, data, { headers }).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    // Update product badge\n    updateBadge(id, data) {\n        const apiRoute = `${this.getApiBasePath()}/${id}`;\n        const headers = this.getBasicHeaders();\n        \n        return this.httpClient.patch(apiRoute, data, { headers }).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    // Delete product badge\n    deleteBadge(id) {\n        const apiRoute = `${this.getApiBasePath()}/${id}`;\n        const headers = this.getBasicHeaders();\n        \n        return this.httpClient.delete(apiRoute, { headers }).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    // Assign badge to product\n    assignBadgeToProduct(productId, productVersionId, badgeId, mediaId = null) {\n        const apiRoute = `${this.getApiBasePath()}/assign`;\n        const headers = this.getBasicHeaders();\n        \n        return this.httpClient.post(\n            apiRoute, \n            {\n                productId: productId,\n                productVersionId: productVersionId,\n                swagProductBadgeId: badgeId,\n                mediaId: mediaId\n            }, \n            { headers }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    // Unassign badge from product\n    unassignBadgeFromProduct(assignmentId) {\n        const apiRoute = `${this.getApiBasePath()}/unassign/${assignmentId}`;\n        const headers = this.getBasicHeaders();\n        \n        return this.httpClient.delete(apiRoute, { headers }).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    // Get product badges for a specific product\n    getProductBadges(productId) {\n        const apiRoute = `/api/product/${productId}/badges`;\n        const headers = this.getBasicHeaders();\n        \n        return this.httpClient.get(apiRoute, { headers }).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    // Get products assigned to a specific badge\n    getBadgeProducts(badgeId) {\n        const apiRoute = `${this.getApiBasePath()}/${badgeId}/products`;\n        const headers = this.getBasicHeaders();\n        \n        return this.httpClient.get(apiRoute, { headers }).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    // Bulk assign badges to products\n    bulkAssignBadges(assignments) {\n        const apiRoute = `${this.getApiBasePath()}/bulk-assign`;\n        const headers = this.getBasicHeaders();\n        \n        return this.httpClient.post(\n            apiRoute, \n            {\n                assignments: assignments\n            }, \n            { headers }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    // Search badges with filters\n    searchBadges(filters = {}, pagination = {}) {\n        const apiRoute = `${this.getApiBasePath()}`;\n        const headers = this.getBasicHeaders();\n        \n        let url = apiRoute;\n        const params = new URLSearchParams();\n        \n        if (filters.active !== undefined) {\n            params.append('active', filters.active);\n        }\n        if (filters.name) {\n            params.append('name', filters.name);\n        }\n        \n        // pagination parameters\n        if (pagination.page) {\n            params.append('page', pagination.page);\n        }\n        if (pagination.limit) {\n            params.append('limit', pagination.limit);\n        }\n        if (pagination.sortBy) {\n            params.append('sortBy', pagination.sortBy);\n        }\n        if (pagination.sortDirection) {\n            params.append('sortDirection', pagination.sortDirection);\n        }\n        \n        if (params.toString()) {\n            url += '?' + params.toString();\n        }\n    \n        return this.httpClient.get(url, { headers }).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    // Add this method to handle removal by product and badge ID\n    removeBadgeFromProduct(productId, badgeId, productImageId = null) {\n        const apiRoute = `${this.getApiBasePath()}/remove-from-product`;\n        const headers = this.getBasicHeaders();\n        \n        return this.httpClient.delete(apiRoute, {\n            data: {\n                productId: productId,\n                badgeId: badgeId,\n                productImageId: productImageId\n            },\n            headers\n        }).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    \n}\n\nexport default ProductBadgeApiService;\n","const { Application } = Shopware;\nimport ProductBadgeApiService from '../core/product-badge-api.service';\n\nApplication.addServiceProvider('ProductBadgeApiService', (container) => {\n    const initContainer = Application.getContainer('init');\n    return new ProductBadgeApiService(initContainer.httpClient, container.loginService);\n});\n","import template from './swag-product-badges-list.html.twig';\nimport './swag-product-badges-list.scss';\n\nconst { Component, Mixin } = Shopware;\n\nComponent.register('swag-product-badges-list', {\n    template,\n\n    inject: [\n        'ProductBadgeApiService',\n        'acl'\n    ],\n\n    mixins: [\n        Mixin.getByName('notification')\n    ],\n\n    data() {\n        return {\n            badges: null,\n            items: null,\n            isLoading: true,\n            sortBy: 'name',\n            sortDirection: 'ASC',\n            naturalSorting: true,\n            showDeleteModal: false,\n            showBulkDeleteModal: false, \n            total: 0,\n            term: '',\n            page: 1,\n            limit: 25,\n            selection: {},\n            selectionCount: 0\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle()\n        };\n    },\n\n    computed: {\n        columns() {\n            return [{\n                property: 'name',\n                dataIndex: 'name',\n                label: this.$t('swag-product-badges.list.columnName'),\n                routerLink: 'swag.product.badges.detail',\n                inlineEdit: 'string',\n                allowResize: true,\n                primary: true,\n                sortable: false\n            }, {\n                property: 'label',\n                dataIndex: 'label',\n                label: this.$t('swag-product-badges.list.columnLabel'),\n                allowResize: true,\n                sortable: false\n            }, {\n                property: 'image',\n                dataIndex: 'image',\n                label: this.$t('swag-product-badges.list.columnImage'),\n                allowResize: true,\n                sortable: false\n            }, {\n                property: 'active',\n                dataIndex: 'active',\n                label: this.$t('swag-product-badges.list.columnActive'),\n                inlineEdit: 'boolean',\n                allowResize: true,\n                align: 'center',\n                sortable: false\n            }, {\n                property: 'createdAt',\n                dataIndex: 'createdAt',\n                label: this.$t('swag-product-badges.list.columnCreatedAt'),\n                allowResize: true,\n                sortable: false\n            }];\n        },\n        dateFilter() {\n            return Shopware.Filter.getByName('date');\n        }\n    },\n\n    created() {\n        \n        this.getList();\n    },\n\n    methods: {\n        async getList() {\n            this.isLoading = true;\n            \n            try {\n                const filters = {};\n                if (this.term) {\n                    filters.name = this.term;\n                }\n        \n                const paginationParams = {\n                    page: this.page,\n                    limit: this.limit,\n                    sortBy: this.sortBy,\n                    sortDirection: this.sortDirection\n                };\n        \n                const result = await this.ProductBadgeApiService.searchBadges(filters, paginationParams);\n                \n                if (result && result.data) {\n                    this.items = result.data;\n                    this.total = result.meta?.total || 0;\n                } else {\n                    this.items = [];\n                    this.total = 0;\n                }\n                \n            } catch (error) {\n                console.error('Error loading badges via API:', error);\n                this.createNotificationError({\n                    title: this.$t('swag-product-badges.list.titleLoadError') || 'Loading Error',\n                    message: this.$t('swag-product-badges.list.messageLoadError') || 'Could not load badges'\n                });\n                this.items = [];\n                this.total = 0;\n            } finally {\n                this.isLoading = false;\n            }\n        },           \n\n        onSearch(term) {\n            this.term = term;\n            this.selection = {};\n            this.selectedItems = [];\n            this.getList();\n        },\n\n        onSelectionChanged(selection, selectionCount) {\n            this.selection = selection;\n            this.selectionCount = selectionCount;\n        },\n        \n        onBulkDeleteButtonClick() {\n            if (this.selectionCount === 0) {\n                return;\n            }\n            \n            this.showBulkDeleteModal = true;\n            \n        },\n        \n        onCloseBulkDeleteModal() {\n            this.showBulkDeleteModal = false;\n        },\n        \n        \n        async onConfirmBulkDelete() {\n            this.showBulkDeleteModal = false;\n            \n            try {\n                const deletePromises = Object.keys(this.selection).map(id => \n                    this.ProductBadgeApiService.deleteBadge(id)\n                );\n                \n                await Promise.all(deletePromises);\n                \n                this.createNotificationSuccess({\n                    title: this.$t('swag-product-badges.list.titleBulkDeleteSuccess'),\n                    message: this.$t('swag-product-badges.list.messageBulkDeleteSuccess')\n                });\n                \n                // Reset selection state\n                this.selection = {};\n                this.selectionCount = 0;\n                \n                // Clear the data grid selection\n                if (this.$refs.dataGrid) {\n                    this.$refs.dataGrid.resetSelection();\n                }\n                \n                await this.getList();\n            } catch (error) {\n                console.error('Error bulk deleting badges:', error);\n                this.createNotificationError({\n                    title: this.$t('swag-product-badges.list.titleBulkDeleteError'),\n                    message: this.$t('swag-product-badges.list.messageBulkDeleteError')\n                });\n            }\n        },\n\n        onPageChange(data) {\n            this.page = data.page;\n            this.limit = data.limit;\n            this.getList();\n        },\n        \n        onSortColumn(data) {\n            this.sortBy = data.sortBy;\n            this.sortDirection = data.sortDirection;\n            this.naturalSorting = data.naturalSorting;\n            this.getList();\n        },\n\n        onChangeLanguage() {\n            this.getList();\n        },\n\n        onRefresh() {\n            this.getList();\n        },\n\n        async onDeleteBadge(badgeId) {\n            try {\n                await this.ProductBadgeApiService.deleteBadge(badgeId);\n                this.createNotificationSuccess({\n                    title: this.$t('swag-product-badges.list.titleDeleteSuccess') || 'Success',\n                    message: this.$t('swag-product-badges.list.messageDeleteSuccess') || 'Badge deleted successfully'\n                });\n                await this.getList();\n            } catch (error) {\n                console.error('Error deleting badge:', error);\n                this.createNotificationError({\n                    title: this.$t('swag-product-badges.list.titleDeleteError') || 'Error',\n                    message: this.$t('swag-product-badges.list.messageDeleteError') || 'Could not delete badge'\n                });\n            }\n        },\n\n        async createBadgeViaApi(badgeData) {\n            try {\n                await this.ProductBadgeApiService.createBadge(badgeData);\n                this.createNotificationSuccess({\n                    title: 'Success',\n                    message: 'Badge created successfully'\n                });\n                await this.getList();\n            } catch (error) {\n                console.error('Error creating badge:', error);\n                this.createNotificationError({\n                    title: 'Create Error',\n                    message: 'Could not create badge'\n                });\n            }\n        },\n\n        async assignBadgeToProduct(productId, productVersionId, badgeId, mediaId = null) {\n            try {\n                await this.ProductBadgeApiService.assignBadgeToProduct(\n                    productId, \n                    productVersionId, \n                    badgeId, \n                    mediaId\n                );\n                this.createNotificationSuccess({\n                    title: 'Success',\n                    message: 'Badge assigned to product successfully'\n                });\n            } catch (error) {\n                console.error('Error assigning badge:', error);\n                this.createNotificationError({\n                    title: 'Assignment Error',\n                    message: 'Could not assign badge to product'\n                });\n            }\n        },\n\n        async bulkAssignBadges(assignments) {\n            try {\n                await this.ProductBadgeApiService.bulkAssignBadges(assignments);\n                this.createNotificationSuccess({\n                    title: 'Success',\n                    message: 'Badges assigned successfully'\n                });\n            } catch (error) {\n                console.error('Error bulk assigning badges:', error);\n                this.createNotificationError({\n                    title: 'Bulk Assignment Error',\n                    message: 'Could not assign badges'\n                });\n            }\n        }\n    }\n});\n","export default \"{% block swag_product_badges_list %}\\n    <sw-page class=\\\"swag-product-badges-list\\\">\\n        {% block swag_product_badges_list_search_bar %}\\n            <template #search-bar>\\n                <sw-search-bar \\n                    :initialSearchType=\\\"$t('swag-product-badges.general.mainMenuItemGeneral')\\\"\\n                    :placeholder=\\\"$t('swag-product-badges.general.placeholderSearchBar')\\\"\\n                    :initialSearch=\\\"term\\\"\\n                    @search=\\\"onSearch\\\">\\n                </sw-search-bar>\\n            </template>\\n        {% endblock %}\\n\\n        {% block swag_product_badges_list_smart_bar_header %}\\n            <template #smart-bar-header>\\n                {% block swag_product_badges_list_smart_bar_header_title %}\\n                    <h2>\\n                        {% block swag_product_badges_list_smart_bar_header_title_text %}\\n                            {{ $t('swag-product-badges.list.textTitle') }}\\n                        {% endblock %}\\n\\n                        {% block swag_product_badges_list_smart_bar_header_amount %}\\n                            <span v-if=\\\"!isLoading\\\" class=\\\"sw-page__smart-bar-amount\\\">\\n                                ({{ total }})\\n                            </span>\\n                        {% endblock %}\\n                    </h2>\\n                {% endblock %}\\n            </template>\\n        {% endblock %}\\n\\n        {% block swag_product_badges_list_smart_bar_actions %}\\n            <template #smart-bar-actions>\\n                {% block swag_product_badges_list_smart_bar_actions_bulk_delete %}\\n                    <sw-button v-if=\\\"selectionCount > 0\\\"\\n                            @click=\\\"onBulkDeleteButtonClick\\\"\\n                            variant=\\\"danger\\\"\\n                            size=\\\"small\\\">\\n                        {{ $t('swag-product-badges.list.buttonBulkDelete') }} ({{ selectionCount }})\\n                    </sw-button>\\n                {% endblock %}\\n\\n\\n                {% block swag_product_badges_list_smart_bar_actions_add %}\\n                    <sw-button :routerLink=\\\"{ name: 'swag.product.badges.create' }\\\" variant=\\\"primary\\\">\\n                        {{ $t('swag-product-badges.list.buttonAddBadge') }}\\n                    </sw-button>\\n                {% endblock %}\\n            </template>\\n        {% endblock %}\\n\\n        <template #content>\\n            {% block swag_product_badges_list_content %}\\n                <div class=\\\"swag-product-badges-list__content\\\">\\n                    {% block swag_product_badges_list_grid %}\\n                        <sw-data-grid\\n                            v-if=\\\"items && items.length > 0\\\"\\n                            :dataSource=\\\"items\\\"\\n                            ref=\\\"dataGrid\\\"\\n                            :columns=\\\"columns\\\"\\n                            :selection=\\\"selection\\\"\\n                            :sortBy=\\\"sortBy\\\"\\n                            :showSelection=\\\"true\\\"\\n                            :allowInlineEdit=\\\"false\\\"\\n                            :allowColumnEdit=\\\"false\\\"\\n                            :sortDirection=\\\"sortDirection\\\"\\n                            :naturalSorting=\\\"naturalSorting\\\"\\n                            :isLoading=\\\"isLoading\\\"\\n                            :skeletonItemAmount=\\\"limit\\\"\\n                            @selection-change=\\\"onSelectionChanged\\\"\\n                            @column-sort=\\\"onSortColumn\\\"\\n                            identifier=\\\"swag-product-badges-list\\\">\\n                            {% block swag_product_badges_list_grid_columns_label %}\\n                                <template #column-label=\\\"{ item }\\\">\\n                                    <span v-if=\\\"item.label\\\">{{ item.label }}</span>\\n                                    <span v-else class=\\\"sw-data-grid__cell-content--empty\\\">-</span>\\n                                </template>\\n                            {% endblock %}\\n\\n                            {% block swag_product_badges_list_grid_columns_image %}\\n                                <template #column-image=\\\"{ item }\\\">\\n                                    <div class=\\\"swag-product-badges-list__image-wrapper\\\" v-if=\\\"item.image && item.image.url\\\">\\n                                        <img :src=\\\"item.image.url\\\" \\n                                            :alt=\\\"item.image.alt || item.altText || item.name\\\"\\n                                            class=\\\"swag-product-badges-list__image\\\"\\n                                            @error=\\\"$event.target.style.display='none'\\\">\\n                                    </div>\\n                                    <span v-else class=\\\"sw-data-grid__cell-content--empty\\\">-</span>\\n                                </template>\\n                            {% endblock %}\\n\\n                            {% block swag_product_badges_list_grid_columns_created_at %}\\n                                <template #column-createdAt=\\\"{ item }\\\">\\n                                    <span v-if=\\\"item.createdAt\\\">\\n                                        {{ dateFilter(item.createdAt) }}\\n                                    </span>\\n                                    <span v-else class=\\\"sw-data-grid__cell-content--empty\\\">-</span>\\n                                </template>\\n                            {% endblock %}\\n\\n                            {% block swag_product_badges_list_grid_columns_actions %}\\n                                <template #actions=\\\"{ item }\\\">\\n                                    {% block swag_product_badges_list_grid_columns_actions_edit %}\\n                                        <sw-context-menu-item class=\\\"swag-product-badge-list__edit-action\\\"\\n                                                            :routerLink=\\\"{ name: 'swag.product.badges.detail', params: { id: item.id } }\\\">\\n                                            {{ $t('swag-product-badges.list.contextMenuEdit') }}\\n                                        </sw-context-menu-item>\\n                                    {% endblock %}\\n\\n                                    {% block swag_product_badges_list_grid_columns_actions_delete %}\\n                                        <sw-context-menu-item @click=\\\"onDeleteBadge(item.id)\\\"\\n                                                            variant=\\\"danger\\\">\\n                                            {{ $t('swag-product-badges.list.contextMenuDelete') }}\\n                                        </sw-context-menu-item>\\n                                    {% endblock %}\\n                                </template>\\n                            {% endblock %}\\n                        </sw-data-grid>\\n\\n                        <sw-pagination v-if=\\\"!isLoading && total > limit\\\"\\n                            :page=\\\"page\\\"\\n                            :limit=\\\"limit\\\"\\n                            :total=\\\"total\\\"\\n                            :total-visible=\\\"7\\\"\\n                            @page-change=\\\"onPageChange\\\">\\n                        </sw-pagination>\\n                    {% endblock %}\\n\\n\\n\\n                    {% block swag_product_badges_list_empty_state %}\\n                        <sw-empty-state v-if=\\\"!isLoading && (!items || items.length === 0)\\\"\\n                                        :title=\\\"$t('swag-product-badges.list.messageEmpty')\\\">\\n                        </sw-empty-state>\\n                    {% endblock %}\\n                </div>\\n            {% endblock %}\\n            {% block swag_product_badges_list_bulk_delete_modal %}\\n                <sw-modal v-if=\\\"showBulkDeleteModal\\\"\\n                        @modal-close=\\\"onCloseBulkDeleteModal\\\"\\n                        :title=\\\"$t('swag-product-badges.list.modalTitleBulkDelete')\\\"\\n                        variant=\\\"small\\\">\\n                    {% block swag_product_badges_list_bulk_delete_modal_confirm_text %}\\n                        <p class=\\\"swag-product-badges-list__confirm-bulk-delete-text\\\">\\n                            {{ $t('swag-product-badges.list.textBulkDeleteConfirm') }}\\n                        </p>\\n                    {% endblock %}\\n\\n                    {% block swag_product_badges_list_bulk_delete_modal_footer %}\\n                        <template #modal-footer>\\n                            {% block swag_product_badges_list_bulk_delete_modal_cancel %}\\n                                <sw-button @click=\\\"onCloseBulkDeleteModal\\\" size=\\\"small\\\">\\n                                    {{ $t('swag-product-badges.list.buttonCancel') }}\\n                                </sw-button>\\n                            {% endblock %}\\n\\n                            {% block swag_product_badges_list_bulk_delete_modal_confirm %}\\n                                <sw-button @click=\\\"onConfirmBulkDelete\\\" variant=\\\"danger\\\" size=\\\"small\\\">\\n                                    {{ $t('swag-product-badges.list.buttonDelete') }}\\n                                </sw-button>\\n                            {% endblock %}\\n                        </template>\\n                    {% endblock %}\\n                </sw-modal>\\n            {% endblock %}\\n        </template>\\n\\n        {% block swag_product_badges_list_sidebar %}\\n            <template #sidebar>\\n                <sw-sidebar>\\n                    {% block swag_product_badges_list_sidebar_refresh %}\\n                        <sw-sidebar-item\\n                            icon=\\\"regular-undo\\\"\\n                            :title=\\\"$t('swag-product-badges.list.titleSidebarItemRefresh')\\\"\\n                            @click=\\\"onRefresh\\\">\\n                        </sw-sidebar-item>\\n                    {% endblock %}\\n                </sw-sidebar>\\n            </template>\\n        {% endblock %}\\n        \\n        \\n    </sw-page>\\n{% endblock %}\\n\";","import template from './swag-product-badges-detail.html.twig';\nimport './swag-product-badges-detail.scss';\n\nconst { Component, Mixin } = Shopware;\nconst { Criteria } = Shopware.Data;\nconst { mapPropertyErrors } = Component.getComponentHelper();\n\nComponent.register('swag-product-badges-detail', {\n    template,\n\n    inject: [\n        'repositoryFactory',\n        'acl'\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('placeholder')\n    ],\n\n    shortcuts: {\n        'SYSTEMKEY+S': {\n            active() {\n                return this.allowSave;\n            },\n            method: 'onSave'\n        },\n        ESCAPE: 'onCancel'\n    },\n\n    data() {\n        return {\n            badge: null,\n            isLoading: false,\n            processSuccess: false,\n            repository: null\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle()\n        };\n    },\n\n    computed: {\n        ...mapPropertyErrors('badge', ['name', 'position1', 'position2']),\n    \n        isCreateMode() {\n            return this.$route.name === 'swag.product.badges.create';\n        },\n    \n        allowSave() {\n            if (!this.badge || !this.acl) {\n                return false;\n            }\n            \n            return this.badge.isNew()\n                ? this.acl.can('swag_product_badge.creator')\n                : this.acl.can('swag_product_badge.editor');\n        },\n    \n        tooltipSave() {\n            if (!this.allowSave) {\n                return {\n                    message: this.$t('sw-privileges.tooltip.warning'),\n                    disabled: this.allowSave,\n                    showOnDisabledElements: true\n                };\n            }\n    \n            const systemKey = this.$device.getSystemKey();\n    \n            return {\n                message: `${systemKey} + S`,\n                appearance: 'light'\n            };\n        },\n    \n        tooltipCancel() {\n            return {\n                message: 'ESC',\n                appearance: 'light'\n            };\n        }\n    },\n    \n\n    created() {\n        this.repository = this.repositoryFactory.create('swag_product_badge');\n        this.getBadge();\n    },\n\n    methods: {\n        getBadge() {\n            this.isLoading = true;\n\n            if (this.isCreateMode) {\n                this.badge = this.repository.create(Shopware.Context.api);\n                this.badge.active = true;\n                this.badge.position1 = 'top-left';\n                this.badge.position2 = 'top-left';\n\n                this.isLoading = false;\n                return;\n            }\n\n            const criteria = new Criteria();\n            criteria.addAssociation('translations');\n\n            this.repository\n                .get(this.$route.params.id, Shopware.Context.api, criteria)\n                .then((entity) => {\n                    this.badge = entity;\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        onSave() {\n            this.isLoading = true;\n        \n            this.repository\n                .save(this.badge, Shopware.Context.api)\n                .then(() => {\n                    this.processSuccess = true;\n                    this.$emit('modal-close');\n                    this.createNotificationSuccess({\n                        title: this.$t('swag-product-badges.detail.titleSaveSuccess'),\n                        message: this.$t('swag-product-badges.detail.messageSaveSuccess')\n                    });\n        \n                    if (this.isCreateMode) {\n                        this.$router.push({ name: 'swag.product.badges.detail', params: { id: this.badge.id } });\n                    } else {\n                        this.getBadge();\n                    }\n                })\n                .catch((error) => {\n                    console.error('Save error:', error);\n                    this.createNotificationError({\n                        title: this.$t('swag-product-badges.detail.titleSaveError'),\n                        message: this.$t('swag-product-badges.detail.messageSaveError')\n                    });\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n        \n\n        onCancel() {\n            this.$router.push({ name: 'swag.product.badges.index' });\n        },\n\n        saveFinish() {\n            this.processSuccess = false;\n        },\n\n        onClickSave() {\n            this.onSave();\n        },\n        \n        onChangeLanguage(languageId) {\n            this.getBadge();\n        },\n    \n        setMediaItem({ targetId }) {\n            this.badge.imageId = targetId;\n        },\n    \n        onDropMedia(dropData) {\n            this.setMediaItem({ targetId: dropData.id });\n        },\n    \n        onUnlinkMedia() {\n            this.badge.imageId = null;\n        },\n    \n        openMediaSidebar() {\n            this.$refs.mediaSidebarModal.openContent();\n        }\n    }\n});\n","export default \"{% block swag_product_badges_detail %}\\n    <sw-page class=\\\"swag-product-badges-detail\\\">\\n\\n        {% block swag_product_badges_detail_header %}\\n            <template #smart-bar-header>\\n                <h2>{{ isCreateMode ? $t('swag-product-badges.detail.textCreateNewBadge') : (badge ? badge.name : '') }}</h2>\\n            </template>\\n        {% endblock %}\\n\\n        {% block swag_product_badges_detail_actions %}\\n            <template #smart-bar-actions>\\n                {% block swag_product_badges_detail_actions_abort %}\\n                    <sw-button :disabled=\\\"isLoading\\\" @click=\\\"onCancel\\\">\\n                        {{ $t('swag-product-badges.detail.buttonCancel') }}\\n                    </sw-button>\\n                {% endblock %}\\n\\n                {% block swag_product_badges_detail_actions_save %}\\n                    <sw-button-process\\n                        :isLoading=\\\"isLoading\\\"\\n                        :processSuccess=\\\"processSuccess\\\"\\n                        :disabled=\\\"isLoading || !allowSave\\\"\\n                        variant=\\\"primary\\\"\\n                        @process-finish=\\\"saveFinish\\\"\\n                        @click=\\\"onClickSave\\\">\\n                        {{ isCreateMode ? $t('swag-product-badges.detail.buttonCreate') : $t('swag-product-badges.detail.buttonSave') }}\\n                    </sw-button-process>\\n                {% endblock %}\\n            </template>\\n        {% endblock %}\\n\\n\\n        {% block swag_product_badges_detail_content %}\\n            <template #content>\\n                <sw-card-view v-if=\\\"badge\\\">\\n                    {% block swag_product_badges_detail_content_language_info %}\\n                        <sw-language-info\\n                            :entityDescription=\\\"badge.name || $t('swag-product-badges.detail.textHeadline')\\\">\\n                        </sw-language-info>\\n                    {% endblock %}\\n\\n                    {% block swag_product_badges_detail_basic_info_card %}\\n                        <sw-card :title=\\\"$t('swag-product-badges.detail.cardTitleBadgeInfo')\\\" :isLoading=\\\"isLoading\\\">\\n                            <sw-container columns=\\\"1fr 1fr\\\" gap=\\\"0px 30px\\\">\\n\\n                                {% block swag_product_badges_detail_basic_info_field_name %}\\n                                    <sw-text-field\\n                                        v-model:value=\\\"badge.name\\\"\\n                                        :error=\\\"badgeNameError\\\"\\n                                        :label=\\\"$t('swag-product-badges.detail.labelName')\\\"\\n                                        :placeholder=\\\"$t('swag-product-badges.detail.placeholderName')\\\"\\n                                        required>\\n                                    </sw-text-field>\\n                                {% endblock %}\\n\\n                                {% block swag_product_badges_detail_basic_info_field_label %}\\n                                    <sw-text-field\\n                                        v-model:value=\\\"badge.label\\\"\\n                                        :label=\\\"$t('swag-product-badges.detail.labelBadgeLabel')\\\"\\n                                        :placeholder=\\\"$t('swag-product-badges.detail.placeholderBadgeLabel')\\\"\\n                                        required>\\n                                    </sw-text-field>\\n                                {% endblock %}\\n\\n                                {% block swag_product_badges_detail_basic_info_field_active %}\\n                                    <sw-switch-field\\n                                        v-model:value=\\\"badge.active\\\"\\n                                        :label=\\\"$t('swag-product-badges.detail.labelActive')\\\">\\n                                    </sw-switch-field>\\n                                {% endblock %}\\n\\n                                {% block swag_product_badges_detail_basic_info_field_position1 %}\\n                                    <sw-single-select\\n                                        v-model:value=\\\"badge.position1\\\"\\n                                        :error=\\\"badgePosition1Error\\\"\\n                                        :label=\\\"$t('swag-product-badges.detail.labelPosition1')\\\"\\n                                        :options=\\\"[\\n                                            { value: 'top-left', label: $t('swag-product-badges.detail.positionTopLeft') },\\n                                            { value: 'top-right', label: $t('swag-product-badges.detail.positionTopRight') },\\n                                            { value: 'bottom-left', label: $t('swag-product-badges.detail.positionBottomLeft') },\\n                                            { value: 'bottom-right', label: $t('swag-product-badges.detail.positionBottomRight') }\\n                                        ]\\\"\\n                                        required>\\n                                    </sw-single-select>\\n                                {% endblock %}\\n\\n                                {% block swag_product_badges_detail_basic_info_field_position2 %}\\n                                    <sw-single-select\\n                                        v-model:value=\\\"badge.position2\\\"\\n                                        :error=\\\"badgePosition2Error\\\"\\n                                        :label=\\\"$t('swag-product-badges.detail.labelPosition2')\\\"\\n                                        :options=\\\"[\\n                                            { value: 'top-left', label: $t('swag-product-badges.detail.positionTopLeft') },\\n                                            { value: 'top-right', label: $t('swag-product-badges.detail.positionTopRight') },\\n                                            { value: 'bottom-left', label: $t('swag-product-badges.detail.positionBottomLeft') },\\n                                            { value: 'bottom-right', label: $t('swag-product-badges.detail.positionBottomRight') }\\n                                        ]\\\"\\n                                        required>\\n                                    </sw-single-select>\\n                                {% endblock %}\\n                            </sw-container>\\n\\n                            <div style=\\\"margin-top: 1rem;\\\">\\n                                {% block swag_product_badges_detail_basic_info_field_image %}\\n                                    <sw-upload-listener\\n                                        :uploadTag=\\\"badge.id\\\"\\n                                        @media-upload-finish=\\\"setMediaItem\\\"\\n                                        autoUpload>\\n                                    </sw-upload-listener>\\n                                    <sw-media-upload-v2\\n                                        :source=\\\"badge.imageId\\\"\\n                                        :allowMultiSelect=\\\"false\\\"\\n                                        :label=\\\"$t('swag-product-badges.detail.labelImage')\\\"\\n                                        :defaultFolder=\\\"badge.getEntityName()\\\"\\n                                        @media-drop=\\\"onDropMedia\\\"\\n                                        @media-upload-remove-image=\\\"onUnlinkMedia\\\"\\n                                        variant=\\\"regular\\\"\\n                                        :uploadTag=\\\"badge.id\\\">\\n                                    </sw-media-upload-v2>\\n                                {% endblock %}\\n                            </div>\\n\\n                        </sw-card>\\n                    {% endblock %}\\n\\n                    {% block swag_product_badges_detail_assignment_card %}\\n                        <sw-card :title=\\\"$t('swag-product-badges.detail.cardTitleAssignments')\\\" :isLoading=\\\"isLoading\\\">\\n                            <swag-product-badges-assignment \\n                                :badgeId=\\\"badge.id\\\" \\n                                :currentBadge=\\\"badge\\\"\\n                                v-if=\\\"!isCreateMode && badge && badge.id\\\">\\n                            </swag-product-badges-assignment>\\n\\n\\n                            <sw-alert v-else variant=\\\"info\\\">\\n                                {{ $t('swag-product-badges.detail.messageCreateFirst') }}\\n                            </sw-alert>\\n                        </sw-card>\\n                    {% endblock %}\\n\\n                </sw-card-view>\\n                \\n                <sw-loader v-else></sw-loader>\\n            </template>\\n        {% endblock %}\\n    </sw-page>\\n{% endblock %}\\n\";","import template from './swag-product-badges-assignment.html.twig';\nimport './swag-product-badges-assignment.scss';\n\nconst { Component, Mixin } = Shopware;\nconst { Criteria, EntityCollection } = Shopware.Data;\n\nComponent.register('swag-product-badges-assignment', {\n    template,\n\n    inject: [\n        'repositoryFactory'\n    ],\n\n    mixins: [\n        Mixin.getByName('notification')\n    ],\n\n    props: {\n        badgeId: {\n            type: String,\n            required: true\n        },\n        currentBadge: {\n            type: Object,\n            required: false,\n            default: null\n        }\n    },    \n\n    data() {\n        return {\n            assignments: null,\n            isLoading: false,\n            assignmentRepository: null,\n            productRepository: null,\n            badgeRepository: null,\n            showProductModal: false,\n            showImageModal: false,\n            productCollection: null,\n            selectedImages: [],\n            productMediaData: {},\n            productCriteria: null,\n            currentBadge: null,\n            showBulkDeleteModal: false,\n            selection: {},\n            selectionCount: 0,\n            page: 1,\n            limit: 25,\n            total: 0\n        };\n    },\n\n    computed: {\n        assignmentColumns() {\n            return [{\n                property: 'product.name',\n                dataIndex: 'product.name',\n                label: this.$t('swag-product-badges.assignment.columnProductName'),\n                allowResize: true,\n                primary: true\n            }, {\n                property: 'product.productNumber',\n                dataIndex: 'product.productNumber',\n                label: this.$t('swag-product-badges.assignment.columnProductNumber'),\n                allowResize: true\n            }, {\n                property: 'media',\n                dataIndex: 'media',\n                label: this.$t('swag-product-badges.assignment.columnImage'),\n                allowResize: true,\n                sortable: false\n            }];\n        },\n\n        selectedProducts() {\n            return this.productCollection ? Array.from(this.productCollection) : [];\n        },\n        areAllImagesSelected() {\n            if (!this.selectedProducts.length) return false;\n            \n            let totalImages = 0;\n            for (const product of this.selectedProducts) {\n                const productMedia = this.getProductMedia(product);\n                totalImages += productMedia.length;\n            }\n            \n            return totalImages > 0 && this.selectedImages.length === totalImages;\n        }\n    },\n\n    async created() {\n        this.assignmentRepository = this.repositoryFactory.create('swag_product_badge_product');\n        this.productRepository = this.repositoryFactory.create('product');\n        this.badgeRepository = this.repositoryFactory.create('swag_product_badge');\n\n        // Initialize product collection\n        this.createEmptyProductCollection();\n        this.createProductCriteria();\n        await this.validateBadgeAndLoad();\n    },\n\n    methods: {\n        areAllProductImagesSelected(productId) {\n            const product = this.selectedProducts.find(p => p.id === productId);\n            if (!product) return false;\n            \n            const productMedia = this.getProductMedia(product);\n            if (productMedia.length === 0) return false;\n            \n            const selectedForProduct = this.selectedImages.filter(item => item.productId === productId);\n            return selectedForProduct.length === productMedia.length;\n        },\n\n        toggleAllImages() {\n            if (this.areAllImagesSelected) {\n                // Deselect all images\n                this.selectedImages = [];\n            } else {\n                // Select all images\n                this.selectedImages = [];\n                for (const product of this.selectedProducts) {\n                    const productMedia = this.getProductMedia(product);\n                    for (const media of productMedia) {\n                        this.selectedImages.push({\n                            productId: product.id,\n                            productVersionId: product.versionId,\n                            mediaId: media.id\n                        });\n                    }\n                }\n            }\n        },\n        toggleAllProductImages(productId) {\n            const product = this.selectedProducts.find(p => p.id === productId);\n            if (!product) return;\n            \n            const productMedia = this.getProductMedia(product);\n            const isAllSelected = this.areAllProductImagesSelected(productId);\n            \n            if (isAllSelected) {\n                // Deselect all images for this product\n                this.selectedImages = this.selectedImages.filter(item => item.productId !== productId);\n            } else {\n                // Remove any existing selections for this product first\n                this.selectedImages = this.selectedImages.filter(item => item.productId !== productId);\n                \n                // Add all images for this product\n                for (const media of productMedia) {\n                    this.selectedImages.push({\n                        productId: product.id,\n                        productVersionId: product.versionId,\n                        mediaId: media.id\n                    });\n                }\n            }\n        },\n        createEmptyProductCollection() {\n            this.productCollection = new EntityCollection(\n                this.productRepository.route,\n                this.productRepository.entityName,\n                Shopware.Context.api\n            );\n        },\n\n        clearProductCollection() {\n            const itemsToRemove = Array.from(this.productCollection);\n            itemsToRemove.forEach(item => {\n                this.productCollection.remove(item.id);\n            });\n        },\n\n        async validateBadgeAndLoad() {\n            try {\n                const criteria = new Criteria();\n                criteria.addFilter(Criteria.equals('id', this.badgeId));\n                const badge = await this.badgeRepository.search(criteria, Shopware.Context.api);\n                \n                if (!badge || badge.length === 0) {\n                    console.error('Badge not found with ID:', this.badgeId);\n                    this.createNotificationError({\n                        title: 'Badge Not Found',\n                        message: `Badge with ID ${this.badgeId} does not exist.`\n                    });\n                    return;\n                }\n\n                this.currentBadge = badge.first();\n                this.getAssignments();\n\n            } catch (error) {\n                console.error('Error validating badge:', error);\n                this.createNotificationError({\n                    title: 'Validation Error',\n                    message: 'Could not validate badge. Please check the console for details.'\n                });\n            }\n        },\n        \n        onSelectionChanged(selection, selectionCount) {\n            this.selection = selection;\n            this.selectionCount = selectionCount;\n        },\n    \n        onBulkDeleteButtonClick() {\n            if (this.selectionCount === 0) {\n                return;\n            }\n            this.showBulkDeleteModal = true;\n        },\n    \n        onCloseBulkDeleteModal() {\n            this.showBulkDeleteModal = false;\n        },\n    \n        async onConfirmBulkDelete() {\n            this.showBulkDeleteModal = false;\n            \n            try {\n                const deletePromises = Object.keys(this.selection).map(id => \n                    this.onDeleteAssignment(id)\n                );\n                \n                await Promise.all(deletePromises);\n                \n                // Reset selection state\n                this.selection = {};\n                this.selectionCount = 0;\n                \n                // Reset to first page and refresh\n                this.page = 1;\n                this.getAssignments();\n                \n                // Clear the data grid selection\n                if (this.$refs.assignmentGrid) {\n                    this.$refs.assignmentGrid.resetSelection();\n                }\n            } catch (error) {\n                console.error('Error bulk deleting assignments:', error);\n            }\n        },\n\n        onDeleteAssignment(id) {\n            this.assignmentRepository\n                .delete(id, Shopware.Context.api)\n                .then(() => {\n                    this.createNotificationSuccess({\n                        title: this.$t('swag-product-badges.assignment.titleUnassignSuccess'),\n                        message: this.$t('swag-product-badges.assignment.messageUnassignSuccess')\n                    });\n                    this.getAssignments();\n                })\n                .catch((error) => {\n                    console.error('Delete assignment error:', error);\n                    this.createNotificationError({\n                        title: this.$t('swag-product-badges.assignment.titleUnassignError'),\n                        message: this.$t('swag-product-badges.assignment.messageUnassignError')\n                    });\n                });\n        },\n        \n        createProductCriteria() {\n            this.productCriteria = new Criteria();\n            this.productCriteria.addAssociation('media');\n            \n            // active products only\n            this.productCriteria.addFilter(Criteria.equals('active', true));\n            \n            // sorting\n            this.productCriteria.addSorting(Criteria.sort('name', 'ASC'));\n        },\n\n        onPageChange(opts) {\n            this.page = opts.page;\n            this.limit = opts.limit;\n            this.getAssignments();\n        },        \n\n        onRefresh() {\n            this.page = 1;\n            this.getAssignments();\n        },\n\n        \n        // getAssignments() {\n        //     if (!this.currentBadge) {\n        //         console.warn('Cannot load assignments - badge not validated yet');\n        //         return;\n        //     }\n            \n        //     this.isLoading = true;\n        //     const criteria = new Criteria(this.page, this.limit);\n        //     criteria.addFilter(Criteria.equals('swagProductBadgeId', this.badgeId));\n        //     criteria.addAssociation('product');\n        //     criteria.addAssociation('media');\n            \n        //     criteria.addSorting(Criteria.sort('createdAt', 'DESC'));\n        \n        //     this.assignmentRepository\n        //         .search(criteria, Shopware.Context.api)\n        //         .then((result) => {\n        //             this.assignments = result;\n        //             this.total = result.total;\n        //         })\n        //         .catch((error) => {\n        //             console.error('Error loading assignments:', error);\n        //             this.assignments = [];\n        //             this.total = 0;\n        //         })\n        //         .finally(() => {\n        //             this.isLoading = false;\n        //         });\n        // },\n\n        async getAssignments() {\n            if (!this.currentBadge) {\n                console.warn('Cannot load assignments - badge not validated yet');\n                return;\n            }\n            \n            this.isLoading = true;\n            const criteria = new Criteria(this.page, this.limit);\n            criteria.addFilter(Criteria.equals('swagProductBadgeId', this.badgeId));\n            criteria.addAssociation('product');\n            criteria.addAssociation('media');\n            \n            criteria.addSorting(Criteria.sort('createdAt', 'DESC'));\n        \n            try {\n                const result = await this.assignmentRepository.search(criteria, Shopware.Context.api);\n                \n               \n                if (result && result.length > 0) {\n                    const parentIdsToFetch = new Set();\n                    \n                    result.forEach(assignment => {\n                        if (assignment.product && assignment.product.parentId && \n                            (!assignment.product.name || assignment.product.name.trim() === '')) {\n                            parentIdsToFetch.add(assignment.product.parentId);\n                        }\n                    });\n                    \n                    let parentProducts = {};\n                    if (parentIdsToFetch.size > 0) {\n                        const parentCriteria = new Criteria();\n                        parentCriteria.addFilter(Criteria.equalsAny('id', Array.from(parentIdsToFetch)));\n                        \n                        const parentResult = await this.productRepository.search(parentCriteria, Shopware.Context.api);\n                        \n                        parentResult.forEach(parent => {\n                            parentProducts[parent.id] = parent;\n                        });\n                    }\n                    \n                    result.forEach(assignment => {\n                        if (assignment.product && assignment.product.parentId && \n                            (!assignment.product.name || assignment.product.name.trim() === '')) {\n                            \n                            const parentProduct = parentProducts[assignment.product.parentId];\n                            if (parentProduct) {\n                                assignment.product.name = parentProduct.name || '';\n                                \n                                if (!assignment.product.translated) {\n                                    assignment.product.translated = {};\n                                }\n                                \n                                if (parentProduct.translated && parentProduct.translated.name) {\n                                    assignment.product.translated.name = parentProduct.translated.name;\n                                } else if (parentProduct.name) {\n                                    assignment.product.translated.name = parentProduct.name;\n                                }\n                            }\n                        }\n                    });\n                }\n                \n                this.assignments = result;\n                this.total = result.total;\n            } catch (error) {\n                console.error('Error loading assignments:', error);\n                this.assignments = [];\n                this.total = 0;\n            } finally {\n                this.isLoading = false;\n            }\n        },        \n\n        onAddProducts() {\n            if (!this.currentBadge) {\n                this.createNotificationError({\n                    title: 'Badge Not Ready',\n                    message: 'Badge validation is still in progress. Please wait.'\n                });\n                return;\n            }\n\n            this.clearProductCollection();\n            this.showProductModal = true;\n        },\n\n        onCloseProductModal() {\n            this.showProductModal = false;\n            this.clearProductCollection();\n        },\n\n        onUpdateProductCollection(collection) {\n            this.productCollection = collection;\n        },\n\n        async onShowImageSelection() {\n            if (!this.productCollection || this.productCollection.length === 0) {\n                console.warn('No products selected');\n                this.createNotificationWarning({\n                    title: this.$t('swag-product-badges.assignment.titleNoSelection'),\n                    message: this.$t('swag-product-badges.assignment.messageNoSelection') || 'Please select at least one product'\n                });\n                return;\n            }\n\n            await this.loadProductMedia();\n            this.showProductModal = false;\n            this.showImageModal = true;\n        },\n\n        // async loadProductMedia() {\n        //     if (!this.productCollection || this.productCollection.length === 0) {\n        //         console.warn('No selected products to load media for');\n        //         return;\n        //     }\n        \n        //     const assignmentCriteria = new Criteria();\n        //     assignmentCriteria.addAssociation('media');\n        //     const allAssignments = await this.assignmentRepository.search(assignmentCriteria, Shopware.Context.api);\n        \n        //     const assignedCombinations = new Set();\n        //     allAssignments.forEach(assignment => {\n        //         if (assignment.productId && assignment.mediaId) {\n        //             assignedCombinations.add(`${assignment.productId}-${assignment.mediaId}`);\n        //         }\n        //     });\n        \n        //     const productIds = Array.from(this.productCollection).map(product => product.id);\n            \n        //     const parentIdsToFetch = new Set();\n        //     Array.from(this.productCollection).forEach(product => {\n        //         if (product.parentId && (!product.name || product.name.trim() === '')) {\n        //             parentIdsToFetch.add(product.parentId);\n        //         }\n        //     });\n            \n        //     let parentProducts = {};\n        //     if (parentIdsToFetch.size > 0) {\n        //         const parentCriteria = new Criteria();\n        //         parentCriteria.addFilter(Criteria.equalsAny('id', Array.from(parentIdsToFetch)));\n                \n        //         const parentResult = await this.productRepository.search(parentCriteria, Shopware.Context.api);\n                \n        //         parentResult.forEach(parent => {\n        //             parentProducts[parent.id] = parent;\n        //         });\n        //     }\n            \n        //     Array.from(this.productCollection).forEach(product => {\n        //         if (product.parentId && (!product.name || product.name.trim() === '') && parentProducts[product.parentId]) {\n        //             const parentProduct = parentProducts[product.parentId];\n        //             product.name = parentProduct.name || '';\n                    \n        //             if (!product.translated) {\n        //                 product.translated = {};\n        //             }\n                    \n        //             if (parentProduct.translated && parentProduct.translated.name) {\n        //                 product.translated.name = parentProduct.translated.name;\n        //             } else if (parentProduct.name) {\n        //                 product.translated.name = parentProduct.name;\n        //             }\n        //         }\n        //     });\n        \n        //     for (const productId of productIds) {\n        //         try {\n        //             const criteria = new Criteria();\n        //             criteria.addAssociation('media');\n                    \n        //             const product = await this.productRepository.get(productId, Shopware.Context.api, criteria);\n                    \n        //             let mediaArray = [];\n        //             let hasOwnMedia = false;\n                    \n        //             if (product && product.media) {\n        //                 if (Array.isArray(product.media)) {\n        //                     mediaArray = product.media;\n        //                 } else if (product.media.elements) {\n        //                     mediaArray = Object.values(product.media.elements);\n        //                 } else if (typeof product.media === 'object') {\n        //                     mediaArray = Object.values(product.media);\n        //                 }\n                        \n        //                 hasOwnMedia = mediaArray.length > 0;\n        //             }\n                    \n        //             if (!hasOwnMedia && product && product.parentId) {\n        //                 try {\n        //                     const parentCriteria = new Criteria();\n        //                     parentCriteria.addAssociation('media');\n                            \n        //                     const parentProduct = await this.productRepository.get(product.parentId, Shopware.Context.api, parentCriteria);\n                            \n        //                     if (parentProduct && parentProduct.media) {\n        //                         if (Array.isArray(parentProduct.media)) {\n        //                             mediaArray = parentProduct.media;\n        //                         } else if (parentProduct.media.elements) {\n        //                             mediaArray = Object.values(parentProduct.media.elements);\n        //                         } else if (typeof parentProduct.media === 'object') {\n        //                             mediaArray = Object.values(parentProduct.media);\n        //                         }\n        //                     }\n        //                 } catch (parentError) {\n        //                     console.warn('Error loading parent product media for product:', productId, parentError);\n        //                 }\n        //             }\n                    \n        //             const unassignedMedia = [];\n        //             for (const productMedia of mediaArray) {\n        //                 if (productMedia && productMedia.media && productMedia.media.id) {\n        //                     const combination = `${productId}-${productMedia.media.id}`;\n        //                     if (!assignedCombinations.has(combination)) {\n        //                         unassignedMedia.push({\n        //                             id: productMedia.media.id,\n        //                             fileName: productMedia.media.fileName || 'Unknown',\n        //                             url: productMedia.media.url || '',\n        //                             alt: productMedia.media.alt || ''\n        //                         });\n        //                     }\n        //                 }\n        //             }\n                    \n        //             this.productMediaData[productId] = unassignedMedia;\n        //         } catch (error) {\n        //             console.error('Error loading media for product:', productId, error);\n        //             this.productMediaData[productId] = [];\n        //         }\n        //     }\n        // },  \n        \n        async loadProductMedia() {\n            if (!this.productCollection || this.productCollection.length === 0) {\n                console.warn('No selected products to load media for');\n                return;\n            }\n        \n            const assignmentCriteria = new Criteria();\n            assignmentCriteria.addAssociation('media');\n            const allAssignments = await this.assignmentRepository.search(assignmentCriteria, Shopware.Context.api);\n        \n            // Filter out only combinations assigned to THIS specific badge\n            const thisAssignedCombinations = new Set();\n            allAssignments.forEach(assignment => {\n                if (assignment.productId && assignment.mediaId && assignment.swagProductBadgeId === this.badgeId) {\n                    thisAssignedCombinations.add(`${assignment.productId}-${assignment.mediaId}`);\n                }\n            });\n        \n            const productIds = Array.from(this.productCollection).map(product => product.id);\n            \n            const parentIdsToFetch = new Set();\n            Array.from(this.productCollection).forEach(product => {\n                if (product.parentId && (!product.name || product.name.trim() === '')) {\n                    parentIdsToFetch.add(product.parentId);\n                }\n            });\n            \n            let parentProducts = {};\n            if (parentIdsToFetch.size > 0) {\n                const parentCriteria = new Criteria();\n                parentCriteria.addFilter(Criteria.equalsAny('id', Array.from(parentIdsToFetch)));\n                \n                const parentResult = await this.productRepository.search(parentCriteria, Shopware.Context.api);\n                \n                parentResult.forEach(parent => {\n                    parentProducts[parent.id] = parent;\n                });\n            }\n            \n            Array.from(this.productCollection).forEach(product => {\n                if (product.parentId && (!product.name || product.name.trim() === '') && parentProducts[product.parentId]) {\n                    const parentProduct = parentProducts[product.parentId];\n                    product.name = parentProduct.name || '';\n                    \n                    if (!product.translated) {\n                        product.translated = {};\n                    }\n                    \n                    if (parentProduct.translated && parentProduct.translated.name) {\n                        product.translated.name = parentProduct.translated.name;\n                    } else if (parentProduct.name) {\n                        product.translated.name = parentProduct.name;\n                    }\n                }\n            });\n        \n            for (const productId of productIds) {\n                try {\n                    const criteria = new Criteria();\n                    criteria.addAssociation('media');\n                    \n                    const product = await this.productRepository.get(productId, Shopware.Context.api, criteria);\n                    \n                    let mediaArray = [];\n                    let hasOwnMedia = false;\n                    \n                    if (product && product.media) {\n                        if (Array.isArray(product.media)) {\n                            mediaArray = product.media;\n                        } else if (product.media.elements) {\n                            mediaArray = Object.values(product.media.elements);\n                        } else if (typeof product.media === 'object') {\n                            mediaArray = Object.values(product.media);\n                        }\n                        \n                        hasOwnMedia = mediaArray.length > 0;\n                    }\n                    \n                    if (!hasOwnMedia && product && product.parentId) {\n                        try {\n                            const parentCriteria = new Criteria();\n                            parentCriteria.addAssociation('media');\n                            \n                            const parentProduct = await this.productRepository.get(product.parentId, Shopware.Context.api, parentCriteria);\n                            \n                            if (parentProduct && parentProduct.media) {\n                                if (Array.isArray(parentProduct.media)) {\n                                    mediaArray = parentProduct.media;\n                                } else if (parentProduct.media.elements) {\n                                    mediaArray = Object.values(parentProduct.media.elements);\n                                } else if (typeof parentProduct.media === 'object') {\n                                    mediaArray = Object.values(parentProduct.media);\n                                }\n                            }\n                        } catch (parentError) {\n                            console.warn('Error loading parent product media for product:', productId, parentError);\n                        }\n                    }\n                    \n                    const unassignedMedia = [];\n                    for (const productMedia of mediaArray) {\n                        if (productMedia && productMedia.media && productMedia.media.id) {\n                            const combination = `${productId}-${productMedia.media.id}`;\n                            // Only exclude if this specific badge-image combination already exists\n                            if (!thisAssignedCombinations.has(combination)) {\n                                unassignedMedia.push({\n                                    id: productMedia.media.id,\n                                    fileName: productMedia.media.fileName || 'Unknown',\n                                    url: productMedia.media.url || '',\n                                    alt: productMedia.media.alt || ''\n                                });\n                            }\n                        }\n                    }\n                    \n                    this.productMediaData[productId] = unassignedMedia;\n                } catch (error) {\n                    console.error('Error loading media for product:', productId, error);\n                    this.productMediaData[productId] = [];\n                }\n            }\n        },\n\n        getProductMedia(product) {\n            return this.productMediaData[product.id] || [];\n        },\n\n        onCloseImageModal() {\n            this.showImageModal = false;\n            this.selectedImages = [];\n            this.productMediaData = {};\n        },\n\n        onBackToProductSelection() {\n            this.showImageModal = false;\n            this.showProductModal = true;\n            this.selectedImages = [];\n        },\n\n        isImageSelected(productId, mediaId) {\n            return this.selectedImages.some(item =>\n                item.productId === productId && item.mediaId === mediaId\n            );\n        },\n\n        toggleImageSelection(productId, mediaId) {\n            const index = this.selectedImages.findIndex(item =>\n                item.productId === productId && item.mediaId === mediaId\n            );\n\n            if (index > -1) {\n                this.selectedImages.splice(index, 1);\n            } else {\n                const product = this.selectedProducts.find(p => p.id === productId);\n                if (product) {\n                    this.selectedImages.push({\n                        productId: productId,\n                        productVersionId: product.versionId,\n                        mediaId: mediaId\n                    });\n                }\n            }\n        },\n\n        async onAssignProductsWithImages() {\n            if (!this.currentBadge) {\n                this.createNotificationError({\n                    title: 'Badge Not Ready',\n                    message: 'Badge validation failed. Cannot create assignments.'\n                });\n                return;\n            }\n        \n            if (this.selectedImages.length === 0) {\n                this.createNotificationWarning({\n                    title: this.$t('swag-product-badges.assignment.titleNoImageSelection'),\n                    message: this.$t('swag-product-badges.assignment.messageNoImageSelection') || 'Please select at least one image'\n                });\n                return;\n            }\n        \n            // Validate and create assignments\n            const validatedAssignments = [];\n        \n            for (const item of this.selectedImages) {\n                if (!item.productId) {\n                    console.error('Missing productId for assignment:', item);\n                    continue;\n                }\n        \n                let mediaId = null;\n                if (item.mediaId) {\n                    try {\n                        const mediaRepository = this.repositoryFactory.create('media');\n                        const media = await mediaRepository.get(item.mediaId, Shopware.Context.api);\n                        if (media) {\n                            mediaId = item.mediaId;\n                        } else {\n                            console.warn('Media not found, setting to null:', item.mediaId);\n                        }\n                    } catch (error) {\n                        console.warn('Media validation failed, setting to null:', item.mediaId, error);\n                    }\n                }\n        \n                const assignment = {\n                    productId: item.productId,\n                    productVersionId: item.productVersionId || 'live',\n                    swagProductBadgeId: this.badgeId,\n                    mediaId: mediaId \n                };\n        \n                validatedAssignments.push(assignment);\n            }\n        \n            if (validatedAssignments.length === 0) {\n                this.createNotificationError({\n                    title: 'Validation Error',\n                    message: 'No valid assignments could be created. Please check your selection.'\n                });\n                return;\n            }\n        \n            this.createAssignmentsSequentially(validatedAssignments);\n        },        \n\n        async createAssignmentsSequentially(assignments) {\n            const successfulAssignments = [];\n            const failedAssignments = [];\n            \n            for (const assignmentData of assignments) {\n                try {\n                    // Checks if assignment already exists to prevent duplicates\n                    const existingCriteria = new Criteria();\n                    existingCriteria.addFilter(Criteria.equals('productId', assignmentData.productId));\n                    existingCriteria.addFilter(Criteria.equals('swagProductBadgeId', assignmentData.swagProductBadgeId));\n                    \n                    if (assignmentData.mediaId) {\n                        existingCriteria.addFilter(Criteria.equals('mediaId', assignmentData.mediaId));\n                    } else {\n                        existingCriteria.addFilter(Criteria.equals('mediaId', null));\n                    }\n                    \n                    const existingAssignments = await this.assignmentRepository.search(existingCriteria, Shopware.Context.api);\n                    \n                    if (existingAssignments.length > 0) {\n                        failedAssignments.push({ assignment: assignmentData, error: 'Assignment already exists' });\n                        continue;\n                    }\n                    \n                    const assignment = this.assignmentRepository.create(Shopware.Context.api);\n                    \n                    assignment.productId = assignmentData.productId;\n                    assignment.productVersionId = assignmentData.productVersionId;\n                    assignment.swagProductBadgeId = assignmentData.swag;\n                    assignment.productId = assignmentData.productId;\n                    assignment.productVersionId = assignmentData.productVersionId;\n                    assignment.swagProductBadgeId = assignmentData.swagProductBadgeId;\n                    assignment.mediaId = assignmentData.mediaId;\n                    \n                    await this.assignmentRepository.save(assignment, Shopware.Context.api);\n                    \n                    successfulAssignments.push(assignmentData);\n                    \n                } catch (error) {\n                    console.error('Failed to create assignment:', assignmentData, error);\n                    failedAssignments.push({ assignment: assignmentData, error: error });\n                }\n            }\n            \n            if (successfulAssignments.length > 0) {\n                this.createNotificationSuccess({\n                    title: this.$t('swag-product-badges.assignment.titleAssignSuccess'),\n                    message: this.$t('swag-product-badges.assignment.descriptionAssignSuccess') + `${successfulAssignments.length} product(s) to badge.`\n                });\n                this.getAssignments(); \n            }\n            \n            if (failedAssignments.length > 0) {\n                console.error('Failed assignments details:', failedAssignments);\n                this.createNotificationError({\n                    title: this.$t('swag-product-badges.assignment.titleAssignError'),\n                    message: this.$t('swag-product-badges.assignment.descriptionAssignError') \n                });\n            }\n            \n            if (successfulAssignments.length > 0) {\n                this.onCloseImageModal();\n                this.onCloseProductModal();\n            }\n        },\n\n        onAssignProducts() {\n            if (!this.currentBadge) {\n                this.createNotificationError({\n                    title: 'Badge Not Ready',\n                    message: 'Badge validation failed. Cannot create assignments.'\n                });\n                return;\n            }\n            \n            if (!this.productCollection || this.productCollection.length === 0) {\n                this.createNotificationWarning({\n                    title: this.$t('swag-product-badges.assignment.titleNoSelection'),\n                    message: this.$t('swag-product-badges.assignment.messageNoSelection') || 'Please select at least one product'\n                });\n                return;\n            }\n        \n            const assignments = Array.from(this.productCollection).map(product => ({\n                productId: product.id,\n                productVersionId: product.versionId,\n                swagProductBadgeId: this.badgeId,\n                mediaId: null // No specific image\n            }));\n        \n            this.createAssignmentsSequentially(assignments);\n        },\n        \n        onDeleteAssignment(id) {\n            this.assignmentRepository\n                .delete(id, Shopware.Context.api)\n                .then(() => {\n                    this.createNotificationSuccess({\n                        title: this.$t('swag-product-badges.assignment.titleUnassignSuccess'),\n                        message: this.$t('swag-product-badges.assignment.messageUnassignSuccess')\n                    });\n                    this.getAssignments();\n                })\n                .catch((error) => {\n                    console.error('Delete assignment error:', error);\n                    this.createNotificationError({\n                        title: this.$t('swag-product-badges.assignment.titleUnassignError'),\n                        message: this.$t('swag-product-badges.assignment.messageUnassignError')\n                    });\n                });\n        }\n    }\n});\n","export default \"{% block swag_product_badges_assignment %}\\n    <div class=\\\"swag-product-badges-assignment\\\">\\n        {% block swag_product_badges_assignment_card_content %}\\n            {% block swag_product_badges_assignment_toolbar %}\\n                <div class=\\\"swag-product-badges-assignment__toolbar\\\">\\n                    <sw-button v-if=\\\"selectionCount > 0\\\"\\n                            @click=\\\"onBulkDeleteButtonClick\\\"\\n                            variant=\\\"danger\\\"\\n                            size=\\\"small\\\">\\n                        <sw-icon name=\\\"regular-trash\\\" size=\\\"16\\\"></sw-icon>\\n                        {{ $t('swag-product-badges.list.buttonBulkDelete') }} ({{ selectionCount }})\\n                    </sw-button>\\n                    \\n                    <sw-button @click=\\\"onAddProducts\\\" variant=\\\"primary\\\" size=\\\"small\\\">\\n                        <sw-icon name=\\\"regular-plus\\\" size=\\\"16\\\"></sw-icon>\\n                        {{ $t('swag-product-badges.list.buttonAddProducts') }}\\n                    </sw-button>\\n                </div>\\n            {% endblock %}\\n\\n            {% block swag_product_badges_assignment_grid %}\\n                <sw-data-grid\\n                    v-if=\\\"assignments\\\"\\n                    :dataSource=\\\"assignments\\\"\\n                    :columns=\\\"assignmentColumns\\\"\\n                    :isLoading=\\\"isLoading\\\"\\n                    :showSelection=\\\"true\\\"\\n                    :selection=\\\"selection\\\"\\n                    @selection-change=\\\"onSelectionChanged\\\"\\n                    @page-change=\\\"onPageChange\\\"\\n                    @refresh=\\\"onRefresh\\\"\\n                    :page=\\\"page\\\"\\n                    :limit=\\\"limit\\\"\\n                    :total=\\\"total\\\"\\n                    :showPagination=\\\"true\\\"\\n                    :allowInlineEdit=\\\"false\\\"\\n                    :allowColumnEdit=\\\"false\\\"\\n                    ref=\\\"assignmentGrid\\\"\\n                    identifier=\\\"swag-product-badges-assignment-list\\\"\\n                    class=\\\"swag-product-badges-assignment__listing\\\">\\n\\n                    {% block swag_product_badges_assignment_grid_columns_media %}\\n                        <template #column-media=\\\"{ item }\\\">\\n                            <div class=\\\"swag-product-badges-assignment__image-wrapper\\\" v-if=\\\"item.media && item.media.url\\\">\\n                                <img :src=\\\"item.media.url\\\" \\n                                    :alt=\\\"item.media.alt || item.media.fileName || 'Product media'\\\"\\n                                    class=\\\"swag-product-badges-assignment__image\\\"\\n                                    @error=\\\"$event.target.style.display='none'\\\">\\n                            </div>\\n                            <span v-else class=\\\"sw-data-grid__cell-content--empty\\\">-</span>\\n                        </template>\\n                    {% endblock %}\\n\\n                    {% block swag_product_badges_assignment_grid_actions %}\\n                        <template #actions=\\\"{ item }\\\">\\n                            <sw-context-menu-item @click=\\\"onDeleteAssignment(item.id)\\\" variant=\\\"danger\\\">\\n                                <sw-icon name=\\\"regular-trash\\\" size=\\\"16\\\"></sw-icon>\\n                                {{ $t('swag-product-badges.assignment.contextMenuUnassign') }}\\n                            </sw-context-menu-item>\\n                        </template>\\n                    {% endblock %}\\n\\n                    {% block swag_product_badges_assignment_grid_pagination %}\\n                        <template #pagination>\\n                            <sw-pagination\\n                                :page=\\\"page\\\"\\n                                :limit=\\\"limit\\\"\\n                                :total=\\\"total\\\"\\n                                :total-visible=\\\"7\\\"\\n                                :steps=\\\"[25, 50, 75, 100]\\\"\\n                                @page-change=\\\"onPageChange\\\">\\n                            </sw-pagination>\\n                        </template>\\n                    {% endblock %}\\n                </sw-data-grid>\\n            {% endblock %}\\n\\n            {% block swag_product_badges_assignment_empty_state %}\\n                <sw-empty-state v-if=\\\"!isLoading && assignments && assignments.length === 0\\\"\\n                                :title=\\\"$t('swag-product-badges.assignment.messageEmpty')\\\"\\n                                icon=\\\"regular-products\\\">\\n                    <p>{{ $t('swag-product-badges.assignment.messageEmptyDescription') }}</p>\\n                </sw-empty-state>\\n            {% endblock %}\\n        {% endblock %}\\n    </div>\\n\\n    \\n    {% block swag_product_badges_assignment_modals %}\\n        {% block swag_product_badges_assignment_product_modal %}\\n            <sw-modal v-if=\\\"showProductModal\\\"\\n                @modal-close=\\\"onCloseProductModal\\\"\\n                :title=\\\"$t('swag-product-badges.assignment.modalTitleSelectProducts')\\\"\\n                variant=\\\"large\\\"\\n                class=\\\"swag-product-badges-modal\\\">\\n\\n                {% block swag_product_badges_assignment_product_modal_grid %}\\n                    <div class=\\\"swag-product-badges-assignment__product-selection\\\">\\n                        <sw-entity-multi-select\\n                            :entity-collection=\\\"productCollection\\\"\\n                            :local-mode=\\\"false\\\"\\n                            entity=\\\"product\\\"\\n                            :criteria=\\\"productCriteria\\\"\\n                            label-property=\\\"name\\\"\\n                            :placeholder=\\\"$t('swag-product-badges.assignment.selectProductsPlaceholder')\\\"\\n                            @update:entity-collection=\\\"onUpdateProductCollection\\\"\\n                            class=\\\"swag-product-badges-assignment__product-select\\\"\\n                        >\\n                            <template #selection-label-property=\\\"{ item }\\\">\\n                                {{ item.translated?.name || item.name }} ({{ item.productNumber }})\\n                            </template>\\n\\n                            <template #result-item=\\\"{ item, index, labelProperty, searchTerm, highlightSearchTerm, isSelected, addItem, getKey }\\\">\\n                                <li is=\\\"sw-select-result\\\"\\n                                    :selected=\\\"isSelected(item)\\\"  \\n                                    v-bind=\\\"{ item, index }\\\"\\n                                    @click=\\\"addItem(item)\\\">\\n                                    <sw-product-variant-info v-if=\\\"item.variation && item.variation.length > 0\\\" :variations=\\\"item.variation\\\">\\n                                        {{ item.translated?.name || item.name }} ({{ item.productNumber }})\\n                                    </sw-product-variant-info>\\n                                    <span v-else>{{ item.translated?.name || item.name }} ({{ item.productNumber }})</span>\\n                                </li>\\n                            </template>\\n\\n                        </sw-entity-multi-select>\\n                    </div>\\n                {% endblock %}\\n\\n\\n                {% block swag_product_badges_assignment_product_modal_footer %}\\n                    <template #modal-footer>\\n                        <div class=\\\"swag-product-badges-assignment__modal-actions\\\">\\n                            <sw-button @click=\\\"onCloseProductModal\\\" size=\\\"small\\\">\\n                                {{ $t('swag-product-badges.assignment.buttonCancel') }}\\n                            </sw-button>\\n                            <sw-button @click=\\\"onShowImageSelection\\\" \\n                                       variant=\\\"primary\\\" \\n                                       size=\\\"small\\\" \\n                                       :disabled=\\\"selectedProducts.length === 0\\\">\\n                                {{ $t('swag-product-badges.assignment.buttonNext') }}\\n                                <sw-icon name=\\\"regular-chevron-right\\\" size=\\\"16\\\"></sw-icon>\\n                            </sw-button>\\n                        </div>\\n                    </template>\\n                {% endblock %}\\n            </sw-modal>\\n        {% endblock %}\\n\\n        {% block swag_product_badges_assignment_image_modal %}\\n            <sw-modal v-if=\\\"showImageModal\\\"\\n                      @modal-close=\\\"onCloseImageModal\\\"\\n                      :title=\\\"$t('swag-product-badges.assignment.modalTitleSelectImages')\\\"\\n                      variant=\\\"large\\\"\\n                      class=\\\"swag-product-badges-modal swag-product-badges-modal--image-selection\\\">\\n\\n                {% block swag_product_badges_assignment_image_modal_content %}\\n                    <div class=\\\"swag-product-badges-assignment__image-selection\\\">\\n                        <div class=\\\"swag-product-badges-assignment__selection-info\\\">\\n                            <sw-alert variant=\\\"info\\\" :showIcon=\\\"true\\\">\\n                                {{ $t('swag-product-badges.assignment.imageSelectionInfo') }}\\n                            </sw-alert>\\n                        </div>\\n\\n                        \\n                        <div class=\\\"global-select-all-section\\\">\\n                            <sw-checkbox-field \\n                                :value=\\\"areAllImagesSelected\\\"\\n                                @update:value=\\\"toggleAllImages\\\"\\n                                :label=\\\"$t('swag-product-badges.assignment.selectAllImages')\\\"\\n                                class=\\\"global-select-all-checkbox\\\">\\n                            </sw-checkbox-field>\\n                        </div>\\n\\n                        <div v-for=\\\"product in selectedProducts\\\" :key=\\\"product.id\\\" class=\\\"product-images-section\\\">\\n                            <div class=\\\"product-header\\\">\\n                                <h3>\\n                                    <sw-icon name=\\\"regular-products\\\" size=\\\"20\\\"></sw-icon>\\n                                    {{ product.name }} \\n                                    <span class=\\\"product-number\\\">({{ product.productNumber }})</span>\\n                                </h3>\\n                                \\n                                \\n                                <sw-checkbox-field \\n                                    v-if=\\\"getProductMedia(product).length > 0\\\"\\n                                    :value=\\\"areAllProductImagesSelected(product.id)\\\"\\n                                    @update:value=\\\"toggleAllProductImages(product.id)\\\"\\n                                    :label=\\\"$t('swag-product-badges.assignment.selectAllImagesForProduct')\\\"\\n                                    class=\\\"product-select-all-checkbox\\\">\\n                                </sw-checkbox-field>\\n                            </div>\\n                            \\n                            {% block swag_product_badges_assignment_product_images %}\\n                                <div class=\\\"product-images-grid\\\">\\n                                    <div v-for=\\\"media in getProductMedia(product)\\\" \\n                                        :key=\\\"media.id\\\" \\n                                        class=\\\"image-item\\\"\\n                                        :class=\\\"{ 'selected': isImageSelected(product.id, media.id), 'parent-media': media.isParentMedia }\\\"\\n                                        @click=\\\"toggleImageSelection(product.id, media.id)\\\"\\n                                        :title=\\\"(media.alt || media.fileName) + (media.isParentMedia ? ' (from parent)' : '')\\\"\\n                                        tabindex=\\\"0\\\"\\n                                        @keydown.enter=\\\"toggleImageSelection(product.id, media.id)\\\"\\n                                        @keydown.space.prevent=\\\"toggleImageSelection(product.id, media.id)\\\">\\n                                        \\n                                        <div class=\\\"image-container\\\">\\n                                            <img :src=\\\"media.url\\\" \\n                                                :alt=\\\"media.alt || media.fileName\\\" \\n                                                class=\\\"product-image\\\"\\n                                                loading=\\\"lazy\\\" />\\n                                            <span v-if=\\\"media.isParentMedia\\\" class=\\\"parent-media-badge\\\">Parent</span>\\n                                        </div>\\n                                        \\n                                        <sw-checkbox-field \\n                                            :value=\\\"isImageSelected(product.id, media.id)\\\"\\n                                            @update:value=\\\"toggleImageSelection(product.id, media.id)\\\"\\n                                            class=\\\"image-checkbox\\\">\\n                                        </sw-checkbox-field>\\n                                    </div>\\n                                </div>\\n                            {% endblock %}\\n\\n                            \\n                            <div v-if=\\\"!getProductMedia(product) || getProductMedia(product).length === 0\\\" \\n                                class=\\\"no-images-available\\\">\\n                                <sw-alert variant=\\\"warning\\\" :showIcon=\\\"true\\\">\\n                                    {{ $t('swag-product-badges.assignment.noImagesForProduct') }}\\n                                </sw-alert>\\n                            </div>\\n                        </div>\\n\\n                        \\n                        <div class=\\\"selection-summary\\\" v-if=\\\"selectedImages.length > 0\\\">\\n                            <sw-card :title=\\\"$t('swag-product-badges.assignment.selectionSummary')\\\" size=\\\"small\\\">\\n                                <p>\\n                                    {{ $t('swag-product-badges.assignment.selectedImagesCount') }}: {{ selectedImages.length }}\\n                                </p>\\n                            </sw-card>\\n                        </div>\\n                    </div>\\n                {% endblock %}\\n\\n\\n                {% block swag_product_badges_assignment_image_modal_footer %}\\n                    <template #modal-footer>\\n                        <div class=\\\"swag-product-badges-assignment__modal-actions\\\">\\n                            <sw-button @click=\\\"onBackToProductSelection\\\" size=\\\"small\\\">\\n                                <sw-icon name=\\\"regular-chevron-left\\\" size=\\\"16\\\"></sw-icon>\\n                                {{ $t('swag-product-badges.assignment.buttonBack') }}\\n                            </sw-button>\\n                            <sw-button @click=\\\"onCloseImageModal\\\" size=\\\"small\\\">\\n                                {{ $t('swag-product-badges.assignment.buttonCancel') }}\\n                            </sw-button>\\n                            <sw-button @click=\\\"onAssignProductsWithImages\\\" \\n                                       variant=\\\"primary\\\" \\n                                       size=\\\"small\\\" \\n                                       :disabled=\\\"selectedImages.length === 0\\\"\\n                                       class=\\\"assign-button\\\">\\n                                {{ $t('swag-product-badges.assignment.buttonAssign') }}\\n                                <span v-if=\\\"selectedImages.length > 0\\\" class=\\\"selection-count\\\">({{ selectedImages.length }})</span>\\n                            </sw-button>\\n                        </div>\\n                    </template>\\n                {% endblock %}\\n            </sw-modal>\\n        {% endblock %}\\n\\n        {% block swag_product_badges_assignment_bulk_delete_modal %}\\n            <sw-modal v-if=\\\"showBulkDeleteModal\\\"\\n                    @modal-close=\\\"onCloseBulkDeleteModal\\\"\\n                    :title=\\\"$t('swag-product-badges.list.modal2TitleBulkDelete')\\\"\\n                    variant=\\\"small\\\">\\n                {% block swag_product_badges_assignment_bulk_delete_modal_confirm_text %}\\n                    <p class=\\\"swag-product-badges-assignment__confirm-bulk-delete-text\\\">\\n                        {{ $t('swag-product-badges.list.text2BulkDeleteConfirm') }}\\n                    </p>\\n                {% endblock %}\\n\\n                {% block swag_product_badges_assignment_bulk_delete_modal_footer %}\\n                    <template #modal-footer>\\n                        {% block swag_product_badges_assignment_bulk_delete_modal_cancel %}\\n                            <sw-button @click=\\\"onCloseBulkDeleteModal\\\" size=\\\"small\\\">\\n                                {{ $t('swag-product-badges.list.buttonCancel') }}\\n                            </sw-button>\\n                        {% endblock %}\\n\\n                        {% block swag_product_badges_assignment_bulk_delete_modal_confirm %}\\n                            <sw-button @click=\\\"onConfirmBulkDelete\\\" variant=\\\"danger\\\" size=\\\"small\\\">\\n                                {{ $t('swag-product-badges.list.buttonDelete') }}\\n                            </sw-button>\\n                        {% endblock %}\\n                    </template>\\n                {% endblock %}\\n            </sw-modal>\\n        {% endblock %}\\n\\n    {% endblock %}\\n{% endblock %}\\n\";","import './page/swag-product-badges-list';\nimport './page/swag-product-badges-detail';\nimport './component/swag-product-badges-assignment';\n\nconst { Module } = Shopware;\n\nModule.register('swag-product-badges', {\n    type: 'plugin',\n    name: 'ProductBadges',\n    title: 'swag-product-badges.general.mainMenuItemGeneral',\n    description: 'swag-product-badges.general.descriptionTextModule',\n    color: '#ff3d58',\n    icon: 'regular-cog',\n\n    routes: {\n        index: {\n            component: 'swag-product-badges-list',\n            path: 'index',\n            meta: {\n                parentPath: 'sw.settings.index.plugins'\n            }\n        },\n        detail: {\n            component: 'swag-product-badges-detail',\n            path: 'detail/:id',\n            meta: {\n                parentPath: 'swag.product.badges.index'\n            }\n        },\n        create: {\n            component: 'swag-product-badges-detail',\n            path: 'create',\n            meta: {\n                parentPath: 'swag.product.badges.index'\n            }\n        }\n    },\n    settingsItem: [{\n        name: 'swag-product-badges',\n        label: 'swag-product-badges.general.mainMenuItemGeneral',\n        to: 'swag.product.badges.index',\n        icon: 'regular-cog',\n        group: 'plugins'\n    }],\n    navigation: [{\n        id: 'swag-product-badges',\n        label: 'swag-product-badges.general.mainMenuItemGeneral',\n        parent: 'sw-catalogue',\n        path: 'swag.product.badges.index',\n        position: 100,\n        icon: 'regular-cog'\n    }]\n});\n","import template from './sw-product-detail.html.twig';\n\nShopware.Component.override('sw-product-detail', {\n  template,\n\n});\n","export default \"{% block sw_product_detail_content_tabs_reviews %}\\n    {% parent %}\\n\\n    <sw-tabs-item\\n        :route=\\\"{ name: 'sw.product.detail.badges', params: { id: $route.params.id } }\\\"\\n        :title=\\\"$tc('swag-product-badges.productDetail.tabTitle')\\\"\\n    >\\n        {{ $tc('swag-product-badges.productDetail.tabTitle') }}\\n    </sw-tabs-item>\\n{% endblock %}\\n\";","import template from './sw-product-detail-badges.html.twig';\nimport './sw-product-detail-badges.scss';\nconst { Mixin } = Shopware;\n\nShopware.Component.register('sw-product-detail-badges', {\n  template,\n  inject: ['ProductBadgeApiService', 'repositoryFactory'],\n\n  mixins: [\n    Mixin.getByName('notification')\n  ],\n  \n  data() {\n    return {\n      badges: [],\n      availableBadges: [],\n      isLoading: false,\n      showAddBadgeModal: false,\n      productImages: [],\n      badgeProductCombinations: [],\n      columns: [\n        {\n          property: 'image',\n          label: this.$t('swag-product-badges.productDetail.columns.badgeImage'),\n          allowResize: true,\n        },\n        {\n          property: 'productImage',\n          label: this.$t('swag-product-badges.productDetail.columns.productImage'),\n          allowResize: true,\n        },\n        {\n          property: 'label',\n          label: this.$t('swag-product-badges.productDetail.columns.label'),\n          allowResize: true,\n        },\n        {\n          property: 'active',\n          label: this.$t('swag-product-badges.productDetail.columns.active'),\n          allowResize: true,\n          align: 'center',\n        },\n        {\n          property: 'createdAt',\n          label: this.$t('swag-product-badges.productDetail.columns.createdAt'),\n          allowResize: true,\n        }\n      ],\n      modalColumns: [\n        {\n          property: 'badgeName',\n          label: this.$t('swag-product-badges.productDetail.modal.columnBadgeName'),\n          allowResize: true,\n        },\n        {\n          property: 'badgeImage',\n          label: this.$t('swag-product-badges.productDetail.modal.columnBadgeImage'),\n          allowResize: true,\n        },\n        {\n          property: 'productImage',\n          label: this.$t('swag-product-badges.productDetail.modal.columnProductImage'),\n          allowResize: true,\n        },\n        {\n          property: 'actions',\n          label: this.$t('swag-product-badges.productDetail.modal.columnActions'),\n          allowResize: true,\n        }\n      ]\n    };\n  },\n\n  created() {\n    this.loadBadges();\n    this.loadProductImages();\n  },\n\n  computed: {\n    dateFilter() {\n        return Shopware.Filter.getByName('date');\n    },\n\n    productId() {\n      return this.$route.params.id;\n    }\n  },\n\n  methods: {\n    loadBadges() {\n      this.isLoading = true;\n      this.ProductBadgeApiService.getBadgesForProduct(this.productId)\n        .then((response) => { \n          this.badges = response.data; \n        })\n        .catch((error) => {\n          console.error('Error loading badges:', error);\n        })\n        .finally(() => { \n          this.isLoading = false; \n        });\n    },\n\n    async loadAvailableBadges() {\n      try {\n        const response = await this.ProductBadgeApiService.searchBadges({ active: true }, { limit: 100 });\n        this.availableBadges = response.data || [];\n        await this.createBadgeProductCombinations();\n      } catch (error) {\n        console.error('Error loading available badges:', error);\n      }\n    },\n\n    async loadProductImages() {\n      const productRepository = this.repositoryFactory.create('product');\n      const criteria = new Shopware.Data.Criteria();\n      criteria.addAssociation('media');\n      \n      try {\n        const product = await productRepository.get(this.productId, Shopware.Context.api, criteria);\n        this.productImages = product.media || [];\n      } catch (error) {\n        console.error('Error loading product images:', error);\n      }\n    },\n\n    \n\n    async getExistingAssignments() {\n      try {\n        const response = await this.ProductBadgeApiService.getBadgesForProduct(this.productId);\n        return response.data || [];\n      } catch (error) {\n        console.error('Error loading existing assignments:', error);\n        return [];\n      }\n    },\n\n    async onAddBadge() {\n      await this.loadAvailableBadges();\n      this.showAddBadgeModal = true;\n    },\n\n    onCloseAddBadgeModal() {\n      this.showAddBadgeModal = false;\n      this.badgeProductCombinations = [];\n    },\n\n    // async createBadgeProductCombinations() {\n    //   // Get existing assignments to filter out assigned combinations\n    //   const existingAssignments = await this.getExistingAssignments();\n    //   const assignedImageIds = new Set();\n      \n    //   // Collect all assigned image IDs (regardless of which badge they're assigned to)\n    //   existingAssignments.forEach(assignment => {\n    //       const mediaId = assignment.mediaId || assignment.productImage?.id;\n    //       if (mediaId && mediaId !== 'null') {\n    //           assignedImageIds.add(mediaId);\n    //       }\n    //   });\n  \n    //   this.badgeProductCombinations = [];\n      \n    //   // Only create combinations for badges with unassigned product images\n    //   this.availableBadges.forEach(badge => {\n    //       // Only add combinations with specific product images that are NOT already assigned\n    //       this.productImages.forEach(productImage => {\n    //           const imageId = productImage.media.id;\n    //           // Only show if this image is not assigned to ANY badge\n    //           if (!assignedImageIds.has(imageId)) {\n    //               this.badgeProductCombinations.push({\n    //                   id: `${badge.id}-${imageId}`,\n    //                   badge: badge,\n    //                   productImage: productImage,\n    //                   badgeName: badge.name,\n    //                   badgeImage: badge.image\n    //               });\n    //           }\n    //       });\n    //   });\n    // },\n\n    async createBadgeProductCombinations() {\n      const existingAssignments = await this.getExistingAssignments();\n      \n      // Create a set of badge-image combinations that are already assigned\n      const assignedBadgeImageCombinations = new Set();\n      existingAssignments.forEach(assignment => {\n          const mediaId = assignment.mediaId || assignment.productImage?.id;\n          const badgeId = assignment.id || assignment.swagProductBadgeId;\n          if (mediaId && mediaId !== 'null' && badgeId) {\n              assignedBadgeImageCombinations.add(`${badgeId}-${mediaId}`);\n          }\n      });\n  \n      this.badgeProductCombinations = [];\n      \n      // Create combinations for all badges and images, excluding only specific badge-image pairs\n      this.availableBadges.forEach(badge => {\n          this.productImages.forEach(productImage => {\n              const imageId = productImage.media.id;\n              const combinationKey = `${badge.id}-${imageId}`;\n              \n              // Only exclude if this specific badge-image combination already exists\n              if (!assignedBadgeImageCombinations.has(combinationKey)) {\n                  this.badgeProductCombinations.push({\n                      id: combinationKey,\n                      badge: badge,\n                      productImage: productImage,\n                      badgeName: badge.name,\n                      badgeImage: badge.image\n                  });\n              }\n          });\n      });\n    },\n  \n    // async onAssignBadge(combination) {\n    //     try {\n    //         // Get product version ID\n    //         const productRepository = this.repositoryFactory.create('product');\n    //         const product = await productRepository.get(this.productId, Shopware.Context.api);\n    //         const productVersionId = product.versionId;\n    \n    //         await this.ProductBadgeApiService.assignBadgeToProduct(\n    //             this.productId,\n    //             productVersionId, // Now providing the actual version ID\n    //             combination.badge.id,\n    //             combination.productImage?.media?.id || null\n    //         );\n    \n    //         this.createNotificationSuccess({\n    //             title: this.$t('swag-product-badges.assignment.titleAssignSuccess'),\n    //             message: this.$t('swag-product-badges.assignment.descriptionAssignSuccess')\n    //         });\n    \n    //         // Remove ALL combinations that use this image (since it's now assigned)\n    //         const assignedImageId = combination.productImage?.media?.id;\n    //         if (assignedImageId) {\n    //             this.badgeProductCombinations = this.badgeProductCombinations.filter(\n    //                 item => item.productImage?.media?.id !== assignedImageId\n    //             );\n    //         }\n    \n    //         this.loadBadges();\n    //     } catch (error) {\n    //         console.error('Error assigning badge:', error);\n    //         this.createNotificationError({\n    //             title: 'Error',\n    //             message: 'Could not assign badge'\n    //         });\n    //     }\n    // },\n  \n    async onAssignBadge(combination) {\n      try {\n          // Get product version ID\n          const productRepository = this.repositoryFactory.create('product');\n          const product = await productRepository.get(this.productId, Shopware.Context.api);\n          const productVersionId = product.versionId;\n  \n          await this.ProductBadgeApiService.assignBadgeToProduct(\n              this.productId,\n              productVersionId, // Now providing the actual version ID\n              combination.badge.id,\n              combination.productImage?.media?.id || null\n          );\n  \n          this.createNotificationSuccess({\n               title: this.$t('swag-product-badges.assignment.titleAssignSuccess'),\n              message: this.$t('swag-product-badges.assignment.descriptionAssignSuccess')\n          });\n  \n          // Remove only the specific badge-image combination that was just assigned\n          const assignedCombinationId = combination.id;\n          this.badgeProductCombinations = this.badgeProductCombinations.filter(\n              item => item.id !== assignedCombinationId\n          );\n  \n          this.loadBadges();\n      } catch (error) {\n          console.error('Error assigning badge:', error);\n          this.createNotificationError({\n              title: 'Error',\n              message: 'Could not assign badge'\n          });\n      }\n    },  \n\n    async onRemoveBadge(badgeAssignment) {\n      try {\n        await this.ProductBadgeApiService.removeBadgeFromProduct(\n          this.productId,\n          badgeAssignment.id || badgeAssignment.swagProductBadgeId,\n          badgeAssignment.productImage?.id || badgeAssignment.mediaId || null\n        );\n\n        this.createNotificationSuccess({\n          title: this.$t('swag-product-badges.assignment.titleUnassignSuccess'),\n          message: this.$t('swag-product-badges.assignment.messageUnassignSuccess')\n        });\n\n        this.loadBadges();\n      } catch (error) {\n        console.error('Error removing badge:', error);\n        this.createNotificationError({\n          title: 'Error',\n          message: 'Could not remove badge'\n        });\n      }\n    },\n  }\n});\n","export default \"<sw-card \\n    :title=\\\"$tc('swag-product-badges.productDetail.tabTitle')\\\" \\n    :isLoading=\\\"isLoading\\\"\\n    class=\\\"swag-product-detail-badges\\\"\\n>\\n    {% block swag_product_detail_badges_header %}\\n        <template #toolbar>\\n            <sw-button \\n                @click=\\\"onAddBadge\\\"\\n                variant=\\\"primary\\\"\\n                size=\\\"small\\\">\\n                {{ $tc('swag-product-badges.productDetail.buttonAddBadge') }}\\n            </sw-button>\\n        </template>\\n    {% endblock %}\\n\\n    <template v-if=\\\"isLoading\\\">\\n        <sw-skeleton />\\n        <sw-skeleton />\\n    </template>\\n\\n    <template v-else>\\n        <sw-data-grid\\n            v-if=\\\"badges.length > 0\\\"\\n            :dataSource=\\\"badges\\\"\\n            :columns=\\\"columns\\\"\\n            :showSelection=\\\"false\\\"\\n            :showActions=\\\"true\\\"\\n            :isLoading=\\\"isLoading\\\"\\n        >\\n            <template #column-image=\\\"{ item }\\\">\\n                <div class=\\\"swag-product-detail-badges__image-wrapper\\\">\\n                    <sw-media-preview-v2 :source=\\\"item.image\\\" />\\n                </div>\\n            </template>\\n\\n            <template #column-productImage=\\\"{ item }\\\">\\n                <div class=\\\"swag-product-detail-badges__image-wrapper\\\">\\n                    <sw-media-preview-v2 \\n                        v-if=\\\"item.productImage\\\" \\n                        :source=\\\"item.productImage\\\" \\n                    />\\n                    <span v-else>\\n                        {{ $tc('swag-product-badges.productDetail.noCover') }}\\n                    </span>\\n                </div>\\n            </template>\\n\\n            <template #column-label=\\\"{ item }\\\">\\n                {{ item.label || item.name }}\\n            </template>\\n\\n            <template #column-active=\\\"{ item }\\\">\\n                <sw-icon\\n                    v-if=\\\"item.active\\\"\\n                    name=\\\"regular-checkmark-xs\\\"\\n                    small\\n                    class=\\\"is--active\\\"\\n                />\\n                <sw-icon\\n                    v-else\\n                    name=\\\"regular-times-s\\\"\\n                    small\\n                    class=\\\"is--inactive\\\"\\n                />\\n            </template>\\n\\n            <template #column-createdAt=\\\"{ item }\\\">\\n                {{ dateFilter(item.createdAt) }}\\n            </template>\\n\\n            {% block swag_product_detail_badges_actions %}\\n                <template #actions=\\\"{ item }\\\">\\n                    <sw-context-menu-item \\n                        @click=\\\"onRemoveBadge(item)\\\"\\n                        variant=\\\"danger\\\">\\n                        {{ $tc('swag-product-badges.productDetail.contextMenuRemove') }}\\n                    </sw-context-menu-item>\\n                </template>\\n            {% endblock %}\\n        </sw-data-grid>\\n\\n        <sw-empty-state\\n            v-else\\n            :title=\\\"$tc('swag-product-badges.productDetail.emptyTitle')\\\"\\n            :subline=\\\"$tc('swag-product-badges.productDetail.emptySubline')\\\"\\n        />\\n    </template>\\n\\n    {% block swag_product_detail_badges_add_modal %}\\n        <sw-modal \\n            v-if=\\\"showAddBadgeModal\\\"\\n            @modal-close=\\\"onCloseAddBadgeModal\\\"\\n            :title=\\\"$tc('swag-product-badges.productDetail.modalTitleAddBadge')\\\"\\n            variant=\\\"large\\\"\\n            class=\\\"swag-product-badge-product-tab-modal\\\">\\n            \\n            {% block swag_product_detail_badges_add_modal_content %}\\n                <div class=\\\"swag-product-badges-add-modal\\\">\\n                    <sw-data-grid\\n                        v-if=\\\"badgeProductCombinations.length > 0\\\"\\n                        :dataSource=\\\"badgeProductCombinations\\\"\\n                        :columns=\\\"modalColumns\\\"\\n                        :showSelection=\\\"false\\\"\\n                        :showActions=\\\"false\\\"\\n                        :isLoading=\\\"false\\\"\\n                        class=\\\"swag-product-badges-add-modal__grid\\\"\\n                    >\\n                        <template #column-badgeName=\\\"{ item }\\\">\\n                            {{ item.badgeName }}\\n                        </template>\\n\\n                        <template #column-badgeImage=\\\"{ item }\\\">\\n                            <div class=\\\"swag-product-badges-add-modal__image\\\">\\n                                <sw-media-preview-v2 \\n                                    v-if=\\\"item.badgeImage\\\" \\n                                    :source=\\\"item.badgeImage\\\" \\n                                />\\n                                <div v-else class=\\\"swag-product-badges-add-modal__no-image\\\">\\n                                    {{ $tc('swag-product-badges.productDetail.noImage') }}\\n                                </div>\\n                            </div>\\n                        </template>\\n\\n                        <template #column-productImage=\\\"{ item }\\\">\\n                            <div class=\\\"swag-product-badges-add-modal__image\\\">\\n                                <sw-media-preview-v2 \\n                                    v-if=\\\"item.productImage\\\" \\n                                    :source=\\\"item.productImage.media\\\" \\n                                />\\n                                <div v-else class=\\\"swag-product-badges-add-modal__no-image\\\">\\n                                    {{ $tc('swag-product-badges.productDetail.noSpecificImage') }}\\n                                </div>\\n                            </div>\\n                        </template>\\n\\n                        <template #column-actions=\\\"{ item }\\\">\\n                            <sw-button \\n                                @click=\\\"onAssignBadge(item)\\\"\\n                                variant=\\\"primary\\\"\\n                                size=\\\"small\\\">\\n                                {{ $tc('swag-product-badges.productDetail.buttonAssign') }}\\n                            </sw-button>\\n                        </template>\\n                    </sw-data-grid>\\n\\n                    <sw-empty-state\\n                        v-else\\n                        :title=\\\"$tc('swag-product-badges.productDetail.modal.emptyTitle')\\\"\\n                        :subline=\\\"$tc('swag-product-badges.productDetail.modal.emptySubline')\\\"\\n                    />\\n                </div>\\n            {% endblock %}\\n\\n            {% block swag_product_detail_badges_add_modal_footer %}\\n                <template #modal-footer>\\n                    <sw-button @click=\\\"onCloseAddBadgeModal\\\" size=\\\"small\\\">\\n                        {{ $tc('swag-product-badges.productDetail.buttonCancel') }}\\n                    </sw-button>\\n                </template>\\n            {% endblock %}\\n        </sw-modal>\\n    {% endblock %}\\n</sw-card>\\n\";","import './init/api-service.init';\nimport './module/swag-product-badges';\n\nimport './page/sw-product-detail';\nimport './view/sw-product-detail-badges';\n\nShopware.Module.register('sw-product-detail-badges', {\n \n  routeMiddleware(next, currentRoute) {\n    if (currentRoute.name === 'sw.product.detail') {\n      currentRoute.children.push({\n        name: 'sw.product.detail.badges',\n        path: '/sw/product/detail/:id/badges',\n        component: 'sw-product-detail-badges',\n        meta: {\n          parentPath: 'sw.product.index'\n        }\n      });\n    }\n    next(currentRoute);\n  }\n});\n\n\n\n"],"names":["content","__esModule","default","module","id","locals","exports","add","listToStyles","parentId","list","styles","newStyles","i","length","item","part","css","media","sourceMap","parts","push","hasDocument","document","DEBUG","stylesInDom","head","getElementsByTagName","singletonElement","singletonCounter","isProduction","noop","options","ssrIdKey","isOldIE","navigator","test","userAgent","toLowerCase","addStylesClient","_isProduction","_options","addStylesToDom","newList","mayRemove","domStyle","refs","j","addStyle","createStyleElement","styleElement","createElement","type","appendChild","obj","update","remove","querySelector","parentNode","removeChild","styleIndex","applyToSingletonTag","bind","applyToTag","newObj","replaceText","textStore","index","replacement","filter","Boolean","join","styleSheet","cssText","cssNode","createTextNode","childNodes","insertBefore","setAttribute","ssrId","sources","btoa","unescape","encodeURIComponent","JSON","stringify","firstChild","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","prop","prototype","hasOwnProperty","call","p","window","__sw__","assetPath","ApiService","Shopware","Classes","constructor","httpClient","loginService","apiEndpoint","getBadgesForProduct","productId","getApiBasePath","headers","getBasicHeaders","then","handleResponse","response","getBadges","criteria","apiRoute","url","params","URLSearchParams","keys","forEach","append","toString","getBadge","createBadge","data","post","updateBadge","patch","deleteBadge","delete","assignBadgeToProduct","productVersionId","badgeId","mediaId","swagProductBadgeId","unassignBadgeFromProduct","assignmentId","getProductBadges","getBadgeProducts","bulkAssignBadges","assignments","searchBadges","filters","pagination","active","name","page","limit","sortBy","sortDirection","removeBadgeFromProduct","productImageId","Application","addServiceProvider","ProductBadgeApiService","initContainer","getContainer","container","Component","Mixin","register","template","inject","mixins","getByName","badges","items","isLoading","naturalSorting","showDeleteModal","showBulkDeleteModal","total","term","selection","selectionCount","metaInfo","title","$createTitle","computed","columns","property","dataIndex","label","$t","routerLink","inlineEdit","allowResize","primary","sortable","align","dateFilter","Filter","created","getList","methods","paginationParams","result","meta","error","console","createNotificationError","message","onSearch","selectedItems","onSelectionChanged","onBulkDeleteButtonClick","onCloseBulkDeleteModal","onConfirmBulkDelete","deletePromises","map","Promise","all","createNotificationSuccess","$refs","dataGrid","resetSelection","onPageChange","onSortColumn","onChangeLanguage","onRefresh","onDeleteBadge","createBadgeViaApi","badgeData","Criteria","Data","mapPropertyErrors","getComponentHelper","shortcuts","allowSave","method","ESCAPE","badge","processSuccess","repository","isCreateMode","$route","acl","isNew","can","tooltipSave","disabled","showOnDisabledElements","systemKey","$device","getSystemKey","appearance","tooltipCancel","repositoryFactory","create","Context","api","position1","position2","addAssociation","entity","finally","onSave","save","$emit","$router","catch","onCancel","saveFinish","onClickSave","languageId","setMediaItem","targetId","imageId","onDropMedia","dropData","onUnlinkMedia","openMediaSidebar","mediaSidebarModal","openContent","EntityCollection","props","String","required","currentBadge","assignmentRepository","productRepository","badgeRepository","showProductModal","showImageModal","productCollection","selectedImages","productMediaData","productCriteria","assignmentColumns","selectedProducts","Array","from","areAllImagesSelected","totalImages","product","productMedia","getProductMedia","createEmptyProductCollection","createProductCriteria","validateBadgeAndLoad","areAllProductImagesSelected","find","selectedForProduct","toggleAllImages","versionId","toggleAllProductImages","route","entityName","clearProductCollection","itemsToRemove","addFilter","equals","search","first","getAssignments","onDeleteAssignment","assignmentGrid","addSorting","sort","opts","warn","parentIdsToFetch","Set","assignment","trim","parentProducts","size","parentCriteria","equalsAny","parentResult","parent","parentProduct","translated","onAddProducts","onCloseProductModal","onUpdateProductCollection","collection","onShowImageSelection","createNotificationWarning","loadProductMedia","assignmentCriteria","allAssignments","thisAssignedCombinations","productIds","mediaArray","hasOwnMedia","isArray","elements","values","parentError","unassignedMedia","combination","has","fileName","alt","onCloseImageModal","onBackToProductSelection","isImageSelected","some","toggleImageSelection","findIndex","splice","onAssignProductsWithImages","validatedAssignments","mediaRepository","createAssignmentsSequentially","successfulAssignments","failedAssignments","assignmentData","existingCriteria","existingAssignments","swag","onAssignProducts","Module","description","color","icon","routes","component","path","parentPath","detail","settingsItem","to","group","navigation","position","override","availableBadges","showAddBadgeModal","productImages","badgeProductCombinations","modalColumns","loadBadges","loadProductImages","loadAvailableBadges","createBadgeProductCombinations","getExistingAssignments","onAddBadge","onCloseAddBadgeModal","assignedBadgeImageCombinations","productImage","combinationKey","badgeName","badgeImage","image","onAssignBadge","assignedCombinationId","onRemoveBadge","badgeAssignment","routeMiddleware","next","currentRoute","children"],"sourceRoot":""}