(function(){var e={568:function(){},98:function(){},590:function(){},106:function(){},412:function(e,t,a){var s=a(568);s.__esModule&&(s=s.default),"string"==typeof s&&(s=[[e.id,s,""]]),s.locals&&(e.exports=s.locals),a(346).Z("a997dc22",s,!0,{})},767:function(e,t,a){var s=a(98);s.__esModule&&(s=s.default),"string"==typeof s&&(s=[[e.id,s,""]]),s.locals&&(e.exports=s.locals),a(346).Z("3a810405",s,!0,{})},289:function(e,t,a){var s=a(590);s.__esModule&&(s=s.default),"string"==typeof s&&(s=[[e.id,s,""]]),s.locals&&(e.exports=s.locals),a(346).Z("3538abf2",s,!0,{})},426:function(e,t,a){var s=a(106);s.__esModule&&(s=s.default),"string"==typeof s&&(s=[[e.id,s,""]]),s.locals&&(e.exports=s.locals),a(346).Z("a37da9ec",s,!0,{})},346:function(e,t,a){"use strict";function s(e,t){for(var a=[],s={},n=0;n<t.length;n++){var i=t[n],o=i[0],d={id:e+":"+n,css:i[1],media:i[2],sourceMap:i[3]};s[o]?s[o].parts.push(d):a.push(s[o]={id:o,parts:[d]})}return a}a.d(t,{Z:function(){return m}});var n="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!n)throw Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var i={},o=n&&(document.head||document.getElementsByTagName("head")[0]),d=null,r=0,l=!1,c=function(){},g=null,u="data-vue-ssr-id",p="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function m(e,t,a,n){l=a,g=n||{};var o=s(e,t);return h(o),function(t){for(var a=[],n=0;n<o.length;n++){var d=i[o[n].id];d.refs--,a.push(d)}t?h(o=s(e,t)):o=[];for(var n=0;n<a.length;n++){var d=a[n];if(0===d.refs){for(var r=0;r<d.parts.length;r++)d.parts[r]();delete i[d.id]}}}}function h(e){for(var t=0;t<e.length;t++){var a=e[t],s=i[a.id];if(s){s.refs++;for(var n=0;n<s.parts.length;n++)s.parts[n](a.parts[n]);for(;n<a.parts.length;n++)s.parts.push(w(a.parts[n]));s.parts.length>a.parts.length&&(s.parts.length=a.parts.length)}else{for(var o=[],n=0;n<a.parts.length;n++)o.push(w(a.parts[n]));i[a.id]={id:a.id,refs:1,parts:o}}}}function b(){var e=document.createElement("style");return e.type="text/css",o.appendChild(e),e}function w(e){var t,a,s=document.querySelector("style["+u+'~="'+e.id+'"]');if(s){if(l)return c;s.parentNode.removeChild(s)}if(p){var n=r++;t=f.bind(null,s=d||(d=b()),n,!1),a=f.bind(null,s,n,!0)}else t=v.bind(null,s=b()),a=function(){s.parentNode.removeChild(s)};return t(e),function(s){s?(s.css!==e.css||s.media!==e.media||s.sourceMap!==e.sourceMap)&&t(e=s):a()}}var _=function(){var e=[];return function(t,a){return e[t]=a,e.filter(Boolean).join("\n")}}();function f(e,t,a,s){var n=a?"":s.css;if(e.styleSheet)e.styleSheet.cssText=_(t,n);else{var i=document.createTextNode(n),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(i,o[t]):e.appendChild(i)}}function v(e,t){var a=t.css,s=t.media,n=t.sourceMap;if(s&&e.setAttribute("media",s),g.ssrId&&e.setAttribute(u,t.id),n&&(a+="\n/*# sourceURL="+n.sources[0]+" */\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(n))))+" */"),e.styleSheet)e.styleSheet.cssText=a;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(a))}}}},t={};function a(s){var n=t[s];if(void 0!==n)return n.exports;var i=t[s]={id:s,exports:{}};return e[s](i,i.exports,a),i.exports}a.d=function(e,t){for(var s in t)a.o(t,s)&&!a.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="bundles/swagproductbadges/",window?.__sw__?.assetPath&&(a.p=window.__sw__.assetPath+"/bundles/swagproductbadges/"),function(){"use strict";let{ApiService:e}=Shopware.Classes;var t=class extends e{constructor(e,t,a="product-badge"){super(e,t,a)}getBadgesForProduct(t){return this.httpClient.get(`${this.getApiBasePath()}/product/${t}`,{headers:this.getBasicHeaders()}).then(t=>e.handleResponse(t))}getBadges(t=null){let a=`${this.getApiBasePath()}`,s=this.getBasicHeaders(),n=a;if(t){let e=new URLSearchParams;Object.keys(t).forEach(a=>{null!==t[a]&&void 0!==t[a]&&e.append(a,t[a])}),e.toString()&&(n+="?"+e.toString())}return this.httpClient.get(n,{headers:s}).then(t=>e.handleResponse(t))}getBadge(t){let a=`${this.getApiBasePath()}/${t}`,s=this.getBasicHeaders();return this.httpClient.get(a,{headers:s}).then(t=>e.handleResponse(t))}createBadge(t){let a=`${this.getApiBasePath()}`,s=this.getBasicHeaders();return this.httpClient.post(a,t,{headers:s}).then(t=>e.handleResponse(t))}updateBadge(t,a){let s=`${this.getApiBasePath()}/${t}`,n=this.getBasicHeaders();return this.httpClient.patch(s,a,{headers:n}).then(t=>e.handleResponse(t))}deleteBadge(t){let a=`${this.getApiBasePath()}/${t}`,s=this.getBasicHeaders();return this.httpClient.delete(a,{headers:s}).then(t=>e.handleResponse(t))}assignBadgeToProduct(t,a,s,n=null){let i=`${this.getApiBasePath()}/assign`,o=this.getBasicHeaders();return this.httpClient.post(i,{productId:t,productVersionId:a,swagProductBadgeId:s,mediaId:n},{headers:o}).then(t=>e.handleResponse(t))}unassignBadgeFromProduct(t){let a=`${this.getApiBasePath()}/unassign/${t}`,s=this.getBasicHeaders();return this.httpClient.delete(a,{headers:s}).then(t=>e.handleResponse(t))}getProductBadges(t){let a=`/api/product/${t}/badges`,s=this.getBasicHeaders();return this.httpClient.get(a,{headers:s}).then(t=>e.handleResponse(t))}getBadgeProducts(t){let a=`${this.getApiBasePath()}/${t}/products`,s=this.getBasicHeaders();return this.httpClient.get(a,{headers:s}).then(t=>e.handleResponse(t))}bulkAssignBadges(t){let a=`${this.getApiBasePath()}/bulk-assign`,s=this.getBasicHeaders();return this.httpClient.post(a,{assignments:t},{headers:s}).then(t=>e.handleResponse(t))}searchBadges(t={},a={}){let s=`${this.getApiBasePath()}`,n=this.getBasicHeaders(),i=s,o=new URLSearchParams;return void 0!==t.active&&o.append("active",t.active),t.name&&o.append("name",t.name),a.page&&o.append("page",a.page),a.limit&&o.append("limit",a.limit),a.sortBy&&o.append("sortBy",a.sortBy),a.sortDirection&&o.append("sortDirection",a.sortDirection),o.toString()&&(i+="?"+o.toString()),this.httpClient.get(i,{headers:n}).then(t=>e.handleResponse(t))}removeBadgeFromProduct(t,a,s=null){let n=`${this.getApiBasePath()}/remove-from-product`,i=this.getBasicHeaders();return this.httpClient.delete(n,{data:{productId:t,badgeId:a,productImageId:s},headers:i}).then(t=>e.handleResponse(t))}};let{Application:s}=Shopware;s.addServiceProvider("ProductBadgeApiService",e=>new t(s.getContainer("init").httpClient,e.loginService)),a(289);let{Component:n,Mixin:i}=Shopware;n.register("swag-product-badges-list",{template:'{% block swag_product_badges_list %}\n    <sw-page class="swag-product-badges-list">\n        {% block swag_product_badges_list_search_bar %}\n            <template #search-bar>\n                <sw-search-bar \n                    :initialSearchType="$t(\'swag-product-badges.general.mainMenuItemGeneral\')"\n                    :placeholder="$t(\'swag-product-badges.general.placeholderSearchBar\')"\n                    :initialSearch="term"\n                    @search="onSearch">\n                </sw-search-bar>\n            </template>\n        {% endblock %}\n\n        {% block swag_product_badges_list_smart_bar_header %}\n            <template #smart-bar-header>\n                {% block swag_product_badges_list_smart_bar_header_title %}\n                    <h2>\n                        {% block swag_product_badges_list_smart_bar_header_title_text %}\n                            {{ $t(\'swag-product-badges.list.textTitle\') }}\n                        {% endblock %}\n\n                        {% block swag_product_badges_list_smart_bar_header_amount %}\n                            <span v-if="!isLoading" class="sw-page__smart-bar-amount">\n                                ({{ total }})\n                            </span>\n                        {% endblock %}\n                    </h2>\n                {% endblock %}\n            </template>\n        {% endblock %}\n\n        {% block swag_product_badges_list_smart_bar_actions %}\n            <template #smart-bar-actions>\n                {% block swag_product_badges_list_smart_bar_actions_bulk_delete %}\n                    <sw-button v-if="selectionCount > 0"\n                            @click="onBulkDeleteButtonClick"\n                            variant="danger"\n                            size="small">\n                        {{ $t(\'swag-product-badges.list.buttonBulkDelete\') }} ({{ selectionCount }})\n                    </sw-button>\n                {% endblock %}\n\n\n                {% block swag_product_badges_list_smart_bar_actions_add %}\n                    <sw-button :routerLink="{ name: \'swag.product.badges.create\' }" variant="primary">\n                        {{ $t(\'swag-product-badges.list.buttonAddBadge\') }}\n                    </sw-button>\n                {% endblock %}\n            </template>\n        {% endblock %}\n\n        <template #content>\n            {% block swag_product_badges_list_content %}\n                <div class="swag-product-badges-list__content">\n                    {% block swag_product_badges_list_grid %}\n                        <sw-data-grid\n                            v-if="items && items.length > 0"\n                            :dataSource="items"\n                            ref="dataGrid"\n                            :columns="columns"\n                            :selection="selection"\n                            :sortBy="sortBy"\n                            :showSelection="true"\n                            :allowInlineEdit="false"\n                            :allowColumnEdit="false"\n                            :sortDirection="sortDirection"\n                            :naturalSorting="naturalSorting"\n                            :isLoading="isLoading"\n                            :skeletonItemAmount="limit"\n                            @selection-change="onSelectionChanged"\n                            @column-sort="onSortColumn"\n                            identifier="swag-product-badges-list">\n                            {% block swag_product_badges_list_grid_columns_label %}\n                                <template #column-label="{ item }">\n                                    <span v-if="item.label">{{ item.label }}</span>\n                                    <span v-else class="sw-data-grid__cell-content--empty">-</span>\n                                </template>\n                            {% endblock %}\n\n                            {% block swag_product_badges_list_grid_columns_image %}\n                                <template #column-image="{ item }">\n                                    <div class="swag-product-badges-list__image-wrapper" v-if="item.image && item.image.url">\n                                        <img :src="item.image.url" \n                                            :alt="item.image.alt || item.altText || item.name"\n                                            class="swag-product-badges-list__image"\n                                            @error="$event.target.style.display=\'none\'">\n                                    </div>\n                                    <span v-else class="sw-data-grid__cell-content--empty">-</span>\n                                </template>\n                            {% endblock %}\n\n                            {% block swag_product_badges_list_grid_columns_created_at %}\n                                <template #column-createdAt="{ item }">\n                                    <span v-if="item.createdAt">\n                                        {{ dateFilter(item.createdAt) }}\n                                    </span>\n                                    <span v-else class="sw-data-grid__cell-content--empty">-</span>\n                                </template>\n                            {% endblock %}\n\n                            {% block swag_product_badges_list_grid_columns_actions %}\n                                <template #actions="{ item }">\n                                    {% block swag_product_badges_list_grid_columns_actions_edit %}\n                                        <sw-context-menu-item class="swag-product-badge-list__edit-action"\n                                                            :routerLink="{ name: \'swag.product.badges.detail\', params: { id: item.id } }">\n                                            {{ $t(\'swag-product-badges.list.contextMenuEdit\') }}\n                                        </sw-context-menu-item>\n                                    {% endblock %}\n\n                                    {% block swag_product_badges_list_grid_columns_actions_delete %}\n                                        <sw-context-menu-item @click="onDeleteBadge(item.id)"\n                                                            variant="danger">\n                                            {{ $t(\'swag-product-badges.list.contextMenuDelete\') }}\n                                        </sw-context-menu-item>\n                                    {% endblock %}\n                                </template>\n                            {% endblock %}\n                        </sw-data-grid>\n\n                        <sw-pagination v-if="!isLoading && total > limit"\n                            :page="page"\n                            :limit="limit"\n                            :total="total"\n                            :total-visible="7"\n                            @page-change="onPageChange">\n                        </sw-pagination>\n                    {% endblock %}\n\n\n\n                    {% block swag_product_badges_list_empty_state %}\n                        <sw-empty-state v-if="!isLoading && (!items || items.length === 0)"\n                                        :title="$t(\'swag-product-badges.list.messageEmpty\')">\n                        </sw-empty-state>\n                    {% endblock %}\n                </div>\n            {% endblock %}\n            {% block swag_product_badges_list_bulk_delete_modal %}\n                <sw-modal v-if="showBulkDeleteModal"\n                        @modal-close="onCloseBulkDeleteModal"\n                        :title="$t(\'swag-product-badges.list.modalTitleBulkDelete\')"\n                        variant="small">\n                    {% block swag_product_badges_list_bulk_delete_modal_confirm_text %}\n                        <p class="swag-product-badges-list__confirm-bulk-delete-text">\n                            {{ $t(\'swag-product-badges.list.textBulkDeleteConfirm\') }}\n                        </p>\n                    {% endblock %}\n\n                    {% block swag_product_badges_list_bulk_delete_modal_footer %}\n                        <template #modal-footer>\n                            {% block swag_product_badges_list_bulk_delete_modal_cancel %}\n                                <sw-button @click="onCloseBulkDeleteModal" size="small">\n                                    {{ $t(\'swag-product-badges.list.buttonCancel\') }}\n                                </sw-button>\n                            {% endblock %}\n\n                            {% block swag_product_badges_list_bulk_delete_modal_confirm %}\n                                <sw-button @click="onConfirmBulkDelete" variant="danger" size="small">\n                                    {{ $t(\'swag-product-badges.list.buttonDelete\') }}\n                                </sw-button>\n                            {% endblock %}\n                        </template>\n                    {% endblock %}\n                </sw-modal>\n            {% endblock %}\n        </template>\n\n        {% block swag_product_badges_list_sidebar %}\n            <template #sidebar>\n                <sw-sidebar>\n                    {% block swag_product_badges_list_sidebar_refresh %}\n                        <sw-sidebar-item\n                            icon="regular-undo"\n                            :title="$t(\'swag-product-badges.list.titleSidebarItemRefresh\')"\n                            @click="onRefresh">\n                        </sw-sidebar-item>\n                    {% endblock %}\n                </sw-sidebar>\n            </template>\n        {% endblock %}\n        \n        \n    </sw-page>\n{% endblock %}\n',inject:["ProductBadgeApiService","acl"],mixins:[i.getByName("notification")],data(){return{badges:null,items:null,isLoading:!0,sortBy:"name",sortDirection:"ASC",naturalSorting:!0,showDeleteModal:!1,showBulkDeleteModal:!1,total:0,term:"",page:1,limit:25,selection:{},selectionCount:0}},metaInfo(){return{title:this.$createTitle()}},computed:{columns(){return[{property:"name",dataIndex:"name",label:this.$t("swag-product-badges.list.columnName"),routerLink:"swag.product.badges.detail",inlineEdit:"string",allowResize:!0,primary:!0,sortable:!1},{property:"label",dataIndex:"label",label:this.$t("swag-product-badges.list.columnLabel"),allowResize:!0,sortable:!1},{property:"image",dataIndex:"image",label:this.$t("swag-product-badges.list.columnImage"),allowResize:!0,sortable:!1},{property:"active",dataIndex:"active",label:this.$t("swag-product-badges.list.columnActive"),inlineEdit:"boolean",allowResize:!0,align:"center",sortable:!1},{property:"createdAt",dataIndex:"createdAt",label:this.$t("swag-product-badges.list.columnCreatedAt"),allowResize:!0,sortable:!1}]},dateFilter(){return Shopware.Filter.getByName("date")}},created(){this.getList()},methods:{async getList(){this.isLoading=!0;try{let e={};this.term&&(e.name=this.term);let t={page:this.page,limit:this.limit,sortBy:this.sortBy,sortDirection:this.sortDirection},a=await this.ProductBadgeApiService.searchBadges(e,t);a&&a.data?(this.items=a.data,this.total=a.meta?.total||0):(this.items=[],this.total=0)}catch(e){console.error("Error loading badges via API:",e),this.createNotificationError({title:this.$t("swag-product-badges.list.titleLoadError")||"Loading Error",message:this.$t("swag-product-badges.list.messageLoadError")||"Could not load badges"}),this.items=[],this.total=0}finally{this.isLoading=!1}},onSearch(e){this.term=e,this.selection={},this.selectedItems=[],this.getList()},onSelectionChanged(e,t){this.selection=e,this.selectionCount=t},onBulkDeleteButtonClick(){0!==this.selectionCount&&(this.showBulkDeleteModal=!0)},onCloseBulkDeleteModal(){this.showBulkDeleteModal=!1},async onConfirmBulkDelete(){this.showBulkDeleteModal=!1;try{let e=Object.keys(this.selection).map(e=>this.ProductBadgeApiService.deleteBadge(e));await Promise.all(e),this.createNotificationSuccess({title:this.$t("swag-product-badges.list.titleBulkDeleteSuccess"),message:this.$t("swag-product-badges.list.messageBulkDeleteSuccess")}),this.selection={},this.selectionCount=0,this.$refs.dataGrid&&this.$refs.dataGrid.resetSelection(),await this.getList()}catch(e){console.error("Error bulk deleting badges:",e),this.createNotificationError({title:this.$t("swag-product-badges.list.titleBulkDeleteError"),message:this.$t("swag-product-badges.list.messageBulkDeleteError")})}},onPageChange(e){this.page=e.page,this.limit=e.limit,this.getList()},onSortColumn(e){this.sortBy=e.sortBy,this.sortDirection=e.sortDirection,this.naturalSorting=e.naturalSorting,this.getList()},onChangeLanguage(){this.getList()},onRefresh(){this.getList()},async onDeleteBadge(e){try{await this.ProductBadgeApiService.deleteBadge(e),this.createNotificationSuccess({title:this.$t("swag-product-badges.list.titleDeleteSuccess")||"Success",message:this.$t("swag-product-badges.list.messageDeleteSuccess")||"Badge deleted successfully"}),await this.getList()}catch(e){console.error("Error deleting badge:",e),this.createNotificationError({title:this.$t("swag-product-badges.list.titleDeleteError")||"Error",message:this.$t("swag-product-badges.list.messageDeleteError")||"Could not delete badge"})}},async createBadgeViaApi(e){try{await this.ProductBadgeApiService.createBadge(e),this.createNotificationSuccess({title:"Success",message:"Badge created successfully"}),await this.getList()}catch(e){console.error("Error creating badge:",e),this.createNotificationError({title:"Create Error",message:"Could not create badge"})}},async assignBadgeToProduct(e,t,a,s=null){try{await this.ProductBadgeApiService.assignBadgeToProduct(e,t,a,s),this.createNotificationSuccess({title:"Success",message:"Badge assigned to product successfully"})}catch(e){console.error("Error assigning badge:",e),this.createNotificationError({title:"Assignment Error",message:"Could not assign badge to product"})}},async bulkAssignBadges(e){try{await this.ProductBadgeApiService.bulkAssignBadges(e),this.createNotificationSuccess({title:"Success",message:"Badges assigned successfully"})}catch(e){console.error("Error bulk assigning badges:",e),this.createNotificationError({title:"Bulk Assignment Error",message:"Could not assign badges"})}}}}),a(767);let{Component:o,Mixin:d}=Shopware,{Criteria:r}=Shopware.Data,{mapPropertyErrors:l}=o.getComponentHelper();o.register("swag-product-badges-detail",{template:'{% block swag_product_badges_detail %}\n    <sw-page class="swag-product-badges-detail">\n\n        {% block swag_product_badges_detail_header %}\n            <template #smart-bar-header>\n                <h2>{{ isCreateMode ? $t(\'swag-product-badges.detail.textCreateNewBadge\') : (badge ? badge.name : \'\') }}</h2>\n            </template>\n        {% endblock %}\n\n        {% block swag_product_badges_detail_actions %}\n            <template #smart-bar-actions>\n                {% block swag_product_badges_detail_actions_abort %}\n                    <sw-button :disabled="isLoading" @click="onCancel">\n                        {{ $t(\'swag-product-badges.detail.buttonCancel\') }}\n                    </sw-button>\n                {% endblock %}\n\n                {% block swag_product_badges_detail_actions_save %}\n                    <sw-button-process\n                        :isLoading="isLoading"\n                        :processSuccess="processSuccess"\n                        :disabled="isLoading || !allowSave"\n                        variant="primary"\n                        @process-finish="saveFinish"\n                        @click="onClickSave">\n                        {{ isCreateMode ? $t(\'swag-product-badges.detail.buttonCreate\') : $t(\'swag-product-badges.detail.buttonSave\') }}\n                    </sw-button-process>\n                {% endblock %}\n            </template>\n        {% endblock %}\n\n\n        {% block swag_product_badges_detail_content %}\n            <template #content>\n                <sw-card-view v-if="badge">\n                    {% block swag_product_badges_detail_content_language_info %}\n                        <sw-language-info\n                            :entityDescription="badge.name || $t(\'swag-product-badges.detail.textHeadline\')">\n                        </sw-language-info>\n                    {% endblock %}\n\n                    {% block swag_product_badges_detail_basic_info_card %}\n                        <sw-card :title="$t(\'swag-product-badges.detail.cardTitleBadgeInfo\')" :isLoading="isLoading">\n                            <sw-container columns="1fr 1fr" gap="0px 30px">\n\n                                {% block swag_product_badges_detail_basic_info_field_name %}\n                                    <sw-text-field\n                                        v-model:value="badge.name"\n                                        :error="badgeNameError"\n                                        :label="$t(\'swag-product-badges.detail.labelName\')"\n                                        :placeholder="$t(\'swag-product-badges.detail.placeholderName\')"\n                                        required>\n                                    </sw-text-field>\n                                {% endblock %}\n\n                                {% block swag_product_badges_detail_basic_info_field_label %}\n                                    <sw-text-field\n                                        v-model:value="badge.label"\n                                        :label="$t(\'swag-product-badges.detail.labelBadgeLabel\')"\n                                        :placeholder="$t(\'swag-product-badges.detail.placeholderBadgeLabel\')"\n                                        required>\n                                    </sw-text-field>\n                                {% endblock %}\n\n                                {% block swag_product_badges_detail_basic_info_field_active %}\n                                    <sw-switch-field\n                                        v-model:value="badge.active"\n                                        :label="$t(\'swag-product-badges.detail.labelActive\')">\n                                    </sw-switch-field>\n                                {% endblock %}\n\n                                {% block swag_product_badges_detail_basic_info_field_position1 %}\n                                    <sw-single-select\n                                        v-model:value="badge.position1"\n                                        :error="badgePosition1Error"\n                                        :label="$t(\'swag-product-badges.detail.labelPosition1\')"\n                                        :options="[\n                                            { value: \'top-left\', label: $t(\'swag-product-badges.detail.positionTopLeft\') },\n                                            { value: \'top-right\', label: $t(\'swag-product-badges.detail.positionTopRight\') },\n                                            { value: \'bottom-left\', label: $t(\'swag-product-badges.detail.positionBottomLeft\') },\n                                            { value: \'bottom-right\', label: $t(\'swag-product-badges.detail.positionBottomRight\') }\n                                        ]"\n                                        required>\n                                    </sw-single-select>\n                                {% endblock %}\n\n                                {% block swag_product_badges_detail_basic_info_field_position2 %}\n                                    <sw-single-select\n                                        v-model:value="badge.position2"\n                                        :error="badgePosition2Error"\n                                        :label="$t(\'swag-product-badges.detail.labelPosition2\')"\n                                        :options="[\n                                            { value: \'top-left\', label: $t(\'swag-product-badges.detail.positionTopLeft\') },\n                                            { value: \'top-right\', label: $t(\'swag-product-badges.detail.positionTopRight\') },\n                                            { value: \'bottom-left\', label: $t(\'swag-product-badges.detail.positionBottomLeft\') },\n                                            { value: \'bottom-right\', label: $t(\'swag-product-badges.detail.positionBottomRight\') }\n                                        ]"\n                                        required>\n                                    </sw-single-select>\n                                {% endblock %}\n                            </sw-container>\n\n                            <div style="margin-top: 1rem;">\n                                {% block swag_product_badges_detail_basic_info_field_image %}\n                                    <sw-upload-listener\n                                        :uploadTag="badge.id"\n                                        @media-upload-finish="setMediaItem"\n                                        autoUpload>\n                                    </sw-upload-listener>\n                                    <sw-media-upload-v2\n                                        :source="badge.imageId"\n                                        :allowMultiSelect="false"\n                                        :label="$t(\'swag-product-badges.detail.labelImage\')"\n                                        :defaultFolder="badge.getEntityName()"\n                                        @media-drop="onDropMedia"\n                                        @media-upload-remove-image="onUnlinkMedia"\n                                        variant="regular"\n                                        :uploadTag="badge.id">\n                                    </sw-media-upload-v2>\n                                {% endblock %}\n                            </div>\n\n                        </sw-card>\n                    {% endblock %}\n\n                    {% block swag_product_badges_detail_assignment_card %}\n                        <sw-card :title="$t(\'swag-product-badges.detail.cardTitleAssignments\')" :isLoading="isLoading">\n                            <swag-product-badges-assignment \n                                :badgeId="badge.id" \n                                :currentBadge="badge"\n                                v-if="!isCreateMode && badge && badge.id">\n                            </swag-product-badges-assignment>\n\n\n                            <sw-alert v-else variant="info">\n                                {{ $t(\'swag-product-badges.detail.messageCreateFirst\') }}\n                            </sw-alert>\n                        </sw-card>\n                    {% endblock %}\n\n                </sw-card-view>\n                \n                <sw-loader v-else></sw-loader>\n            </template>\n        {% endblock %}\n    </sw-page>\n{% endblock %}\n',inject:["repositoryFactory","acl"],mixins:[d.getByName("notification"),d.getByName("placeholder")],shortcuts:{"SYSTEMKEY+S":{active(){return this.allowSave},method:"onSave"},ESCAPE:"onCancel"},data(){return{badge:null,isLoading:!1,processSuccess:!1,repository:null}},metaInfo(){return{title:this.$createTitle()}},computed:{...l("badge",["name","position1","position2"]),isCreateMode(){return"swag.product.badges.create"===this.$route.name},allowSave(){return!!this.badge&&!!this.acl&&(this.badge.isNew()?this.acl.can("swag_product_badge.creator"):this.acl.can("swag_product_badge.editor"))},tooltipSave(){if(!this.allowSave)return{message:this.$t("sw-privileges.tooltip.warning"),disabled:this.allowSave,showOnDisabledElements:!0};let e=this.$device.getSystemKey();return{message:`${e} + S`,appearance:"light"}},tooltipCancel(){return{message:"ESC",appearance:"light"}}},created(){this.repository=this.repositoryFactory.create("swag_product_badge"),this.getBadge()},methods:{getBadge(){if(this.isLoading=!0,this.isCreateMode){this.badge=this.repository.create(Shopware.Context.api),this.badge.active=!0,this.badge.position1="top-left",this.badge.position2="top-left",this.isLoading=!1;return}let e=new r;e.addAssociation("translations"),this.repository.get(this.$route.params.id,Shopware.Context.api,e).then(e=>{this.badge=e}).finally(()=>{this.isLoading=!1})},onSave(){this.isLoading=!0,this.repository.save(this.badge,Shopware.Context.api).then(()=>{this.processSuccess=!0,this.$emit("modal-close"),this.createNotificationSuccess({title:this.$t("swag-product-badges.detail.titleSaveSuccess"),message:this.$t("swag-product-badges.detail.messageSaveSuccess")}),this.isCreateMode?this.$router.push({name:"swag.product.badges.detail",params:{id:this.badge.id}}):this.getBadge()}).catch(e=>{console.error("Save error:",e),this.createNotificationError({title:this.$t("swag-product-badges.detail.titleSaveError"),message:this.$t("swag-product-badges.detail.messageSaveError")})}).finally(()=>{this.isLoading=!1})},onCancel(){this.$router.push({name:"swag.product.badges.index"})},saveFinish(){this.processSuccess=!1},onClickSave(){this.onSave()},onChangeLanguage(e){this.getBadge()},setMediaItem({targetId:e}){this.badge.imageId=e},onDropMedia(e){this.setMediaItem({targetId:e.id})},onUnlinkMedia(){this.badge.imageId=null},openMediaSidebar(){this.$refs.mediaSidebarModal.openContent()}}}),a(412);let{Component:c,Mixin:g}=Shopware,{Criteria:u,EntityCollection:p}=Shopware.Data;c.register("swag-product-badges-assignment",{template:'{% block swag_product_badges_assignment %}\n    <div class="swag-product-badges-assignment">\n        {% block swag_product_badges_assignment_card_content %}\n            {% block swag_product_badges_assignment_toolbar %}\n                <div class="swag-product-badges-assignment__toolbar">\n                    <sw-button v-if="selectionCount > 0"\n                            @click="onBulkDeleteButtonClick"\n                            variant="danger"\n                            size="small">\n                        <sw-icon name="regular-trash" size="16"></sw-icon>\n                        {{ $t(\'swag-product-badges.list.buttonBulkDelete\') }} ({{ selectionCount }})\n                    </sw-button>\n                    \n                    <sw-button @click="onAddProducts" variant="primary" size="small">\n                        <sw-icon name="regular-plus" size="16"></sw-icon>\n                        {{ $t(\'swag-product-badges.list.buttonAddProducts\') }}\n                    </sw-button>\n                </div>\n            {% endblock %}\n\n            {% block swag_product_badges_assignment_grid %}\n                <sw-data-grid\n                    v-if="assignments"\n                    :dataSource="assignments"\n                    :columns="assignmentColumns"\n                    :isLoading="isLoading"\n                    :showSelection="true"\n                    :selection="selection"\n                    @selection-change="onSelectionChanged"\n                    @page-change="onPageChange"\n                    @refresh="onRefresh"\n                    :page="page"\n                    :limit="limit"\n                    :total="total"\n                    :showPagination="true"\n                    :allowInlineEdit="false"\n                    :allowColumnEdit="false"\n                    ref="assignmentGrid"\n                    identifier="swag-product-badges-assignment-list"\n                    class="swag-product-badges-assignment__listing">\n\n                    {% block swag_product_badges_assignment_grid_columns_media %}\n                        <template #column-media="{ item }">\n                            <div class="swag-product-badges-assignment__image-wrapper" v-if="item.media && item.media.url">\n                                <img :src="item.media.url" \n                                    :alt="item.media.alt || item.media.fileName || \'Product media\'"\n                                    class="swag-product-badges-assignment__image"\n                                    @error="$event.target.style.display=\'none\'">\n                            </div>\n                            <span v-else class="sw-data-grid__cell-content--empty">-</span>\n                        </template>\n                    {% endblock %}\n\n                    {% block swag_product_badges_assignment_grid_actions %}\n                        <template #actions="{ item }">\n                            <sw-context-menu-item @click="onDeleteAssignment(item.id)" variant="danger">\n                                <sw-icon name="regular-trash" size="16"></sw-icon>\n                                {{ $t(\'swag-product-badges.assignment.contextMenuUnassign\') }}\n                            </sw-context-menu-item>\n                        </template>\n                    {% endblock %}\n\n                    {% block swag_product_badges_assignment_grid_pagination %}\n                        <template #pagination>\n                            <sw-pagination\n                                :page="page"\n                                :limit="limit"\n                                :total="total"\n                                :total-visible="7"\n                                :steps="[25, 50, 75, 100]"\n                                @page-change="onPageChange">\n                            </sw-pagination>\n                        </template>\n                    {% endblock %}\n                </sw-data-grid>\n            {% endblock %}\n\n            {% block swag_product_badges_assignment_empty_state %}\n                <sw-empty-state v-if="!isLoading && assignments && assignments.length === 0"\n                                :title="$t(\'swag-product-badges.assignment.messageEmpty\')"\n                                icon="regular-products">\n                    <p>{{ $t(\'swag-product-badges.assignment.messageEmptyDescription\') }}</p>\n                </sw-empty-state>\n            {% endblock %}\n        {% endblock %}\n    </div>\n\n    \n    {% block swag_product_badges_assignment_modals %}\n        {% block swag_product_badges_assignment_product_modal %}\n            <sw-modal v-if="showProductModal"\n                @modal-close="onCloseProductModal"\n                :title="$t(\'swag-product-badges.assignment.modalTitleSelectProducts\')"\n                variant="large"\n                class="swag-product-badges-modal">\n\n                {% block swag_product_badges_assignment_product_modal_grid %}\n                    <div class="swag-product-badges-assignment__product-selection">\n                        <sw-entity-multi-select\n                            :entity-collection="productCollection"\n                            :local-mode="false"\n                            entity="product"\n                            :criteria="productCriteria"\n                            label-property="name"\n                            :placeholder="$t(\'swag-product-badges.assignment.selectProductsPlaceholder\')"\n                            @update:entity-collection="onUpdateProductCollection"\n                            class="swag-product-badges-assignment__product-select"\n                        >\n                            <template #selection-label-property="{ item }">\n                                {{ item.translated?.name || item.name }} ({{ item.productNumber }})\n                            </template>\n\n                            <template #result-item="{ item, index, labelProperty, searchTerm, highlightSearchTerm, isSelected, addItem, getKey }">\n                                <li is="sw-select-result"\n                                    :selected="isSelected(item)"  \n                                    v-bind="{ item, index }"\n                                    @click="addItem(item)">\n                                    <sw-product-variant-info v-if="item.variation && item.variation.length > 0" :variations="item.variation">\n                                        {{ item.translated?.name || item.name }} ({{ item.productNumber }})\n                                    </sw-product-variant-info>\n                                    <span v-else>{{ item.translated?.name || item.name }} ({{ item.productNumber }})</span>\n                                </li>\n                            </template>\n\n                        </sw-entity-multi-select>\n                    </div>\n                {% endblock %}\n\n\n                {% block swag_product_badges_assignment_product_modal_footer %}\n                    <template #modal-footer>\n                        <div class="swag-product-badges-assignment__modal-actions">\n                            <sw-button @click="onCloseProductModal" size="small">\n                                {{ $t(\'swag-product-badges.assignment.buttonCancel\') }}\n                            </sw-button>\n                            <sw-button @click="onShowImageSelection" \n                                       variant="primary" \n                                       size="small" \n                                       :disabled="selectedProducts.length === 0">\n                                {{ $t(\'swag-product-badges.assignment.buttonNext\') }}\n                                <sw-icon name="regular-chevron-right" size="16"></sw-icon>\n                            </sw-button>\n                        </div>\n                    </template>\n                {% endblock %}\n            </sw-modal>\n        {% endblock %}\n\n        {% block swag_product_badges_assignment_image_modal %}\n            <sw-modal v-if="showImageModal"\n                      @modal-close="onCloseImageModal"\n                      :title="$t(\'swag-product-badges.assignment.modalTitleSelectImages\')"\n                      variant="large"\n                      class="swag-product-badges-modal swag-product-badges-modal--image-selection">\n\n                {% block swag_product_badges_assignment_image_modal_content %}\n                    <div class="swag-product-badges-assignment__image-selection">\n                        <div class="swag-product-badges-assignment__selection-info">\n                            <sw-alert variant="info" :showIcon="true">\n                                {{ $t(\'swag-product-badges.assignment.imageSelectionInfo\') }}\n                            </sw-alert>\n                        </div>\n\n                        \n                        <div class="global-select-all-section">\n                            <sw-checkbox-field \n                                :value="areAllImagesSelected"\n                                @update:value="toggleAllImages"\n                                :label="$t(\'swag-product-badges.assignment.selectAllImages\')"\n                                class="global-select-all-checkbox">\n                            </sw-checkbox-field>\n                        </div>\n\n                        <div v-for="product in selectedProducts" :key="product.id" class="product-images-section">\n                            <div class="product-header">\n                                <h3>\n                                    <sw-icon name="regular-products" size="20"></sw-icon>\n                                    {{ product.name }} \n                                    <span class="product-number">({{ product.productNumber }})</span>\n                                </h3>\n                                \n                                \n                                <sw-checkbox-field \n                                    v-if="getProductMedia(product).length > 0"\n                                    :value="areAllProductImagesSelected(product.id)"\n                                    @update:value="toggleAllProductImages(product.id)"\n                                    :label="$t(\'swag-product-badges.assignment.selectAllImagesForProduct\')"\n                                    class="product-select-all-checkbox">\n                                </sw-checkbox-field>\n                            </div>\n                            \n                            {% block swag_product_badges_assignment_product_images %}\n                                <div class="product-images-grid">\n                                    <div v-for="media in getProductMedia(product)" \n                                        :key="media.id" \n                                        class="image-item"\n                                        :class="{ \'selected\': isImageSelected(product.id, media.id), \'parent-media\': media.isParentMedia }"\n                                        @click="toggleImageSelection(product.id, media.id)"\n                                        :title="(media.alt || media.fileName) + (media.isParentMedia ? \' (from parent)\' : \'\')"\n                                        tabindex="0"\n                                        @keydown.enter="toggleImageSelection(product.id, media.id)"\n                                        @keydown.space.prevent="toggleImageSelection(product.id, media.id)">\n                                        \n                                        <div class="image-container">\n                                            <img :src="media.url" \n                                                :alt="media.alt || media.fileName" \n                                                class="product-image"\n                                                loading="lazy" />\n                                            <span v-if="media.isParentMedia" class="parent-media-badge">Parent</span>\n                                        </div>\n                                        \n                                        <sw-checkbox-field \n                                            :value="isImageSelected(product.id, media.id)"\n                                            @update:value="toggleImageSelection(product.id, media.id)"\n                                            class="image-checkbox">\n                                        </sw-checkbox-field>\n                                    </div>\n                                </div>\n                            {% endblock %}\n\n                            \n                            <div v-if="!getProductMedia(product) || getProductMedia(product).length === 0" \n                                class="no-images-available">\n                                <sw-alert variant="warning" :showIcon="true">\n                                    {{ $t(\'swag-product-badges.assignment.noImagesForProduct\') }}\n                                </sw-alert>\n                            </div>\n                        </div>\n\n                        \n                        <div class="selection-summary" v-if="selectedImages.length > 0">\n                            <sw-card :title="$t(\'swag-product-badges.assignment.selectionSummary\')" size="small">\n                                <p>\n                                    {{ $t(\'swag-product-badges.assignment.selectedImagesCount\') }}: {{ selectedImages.length }}\n                                </p>\n                            </sw-card>\n                        </div>\n                    </div>\n                {% endblock %}\n\n\n                {% block swag_product_badges_assignment_image_modal_footer %}\n                    <template #modal-footer>\n                        <div class="swag-product-badges-assignment__modal-actions">\n                            <sw-button @click="onBackToProductSelection" size="small">\n                                <sw-icon name="regular-chevron-left" size="16"></sw-icon>\n                                {{ $t(\'swag-product-badges.assignment.buttonBack\') }}\n                            </sw-button>\n                            <sw-button @click="onCloseImageModal" size="small">\n                                {{ $t(\'swag-product-badges.assignment.buttonCancel\') }}\n                            </sw-button>\n                            <sw-button @click="onAssignProductsWithImages" \n                                       variant="primary" \n                                       size="small" \n                                       :disabled="selectedImages.length === 0"\n                                       class="assign-button">\n                                {{ $t(\'swag-product-badges.assignment.buttonAssign\') }}\n                                <span v-if="selectedImages.length > 0" class="selection-count">({{ selectedImages.length }})</span>\n                            </sw-button>\n                        </div>\n                    </template>\n                {% endblock %}\n            </sw-modal>\n        {% endblock %}\n\n        {% block swag_product_badges_assignment_bulk_delete_modal %}\n            <sw-modal v-if="showBulkDeleteModal"\n                    @modal-close="onCloseBulkDeleteModal"\n                    :title="$t(\'swag-product-badges.list.modal2TitleBulkDelete\')"\n                    variant="small">\n                {% block swag_product_badges_assignment_bulk_delete_modal_confirm_text %}\n                    <p class="swag-product-badges-assignment__confirm-bulk-delete-text">\n                        {{ $t(\'swag-product-badges.list.text2BulkDeleteConfirm\') }}\n                    </p>\n                {% endblock %}\n\n                {% block swag_product_badges_assignment_bulk_delete_modal_footer %}\n                    <template #modal-footer>\n                        {% block swag_product_badges_assignment_bulk_delete_modal_cancel %}\n                            <sw-button @click="onCloseBulkDeleteModal" size="small">\n                                {{ $t(\'swag-product-badges.list.buttonCancel\') }}\n                            </sw-button>\n                        {% endblock %}\n\n                        {% block swag_product_badges_assignment_bulk_delete_modal_confirm %}\n                            <sw-button @click="onConfirmBulkDelete" variant="danger" size="small">\n                                {{ $t(\'swag-product-badges.list.buttonDelete\') }}\n                            </sw-button>\n                        {% endblock %}\n                    </template>\n                {% endblock %}\n            </sw-modal>\n        {% endblock %}\n\n    {% endblock %}\n{% endblock %}\n',inject:["repositoryFactory"],mixins:[g.getByName("notification")],props:{badgeId:{type:String,required:!0},currentBadge:{type:Object,required:!1,default:null}},data(){return{assignments:null,isLoading:!1,assignmentRepository:null,productRepository:null,badgeRepository:null,showProductModal:!1,showImageModal:!1,productCollection:null,selectedImages:[],productMediaData:{},productCriteria:null,currentBadge:null,showBulkDeleteModal:!1,selection:{},selectionCount:0,page:1,limit:25,total:0}},computed:{assignmentColumns(){return[{property:"product.name",dataIndex:"product.name",label:this.$t("swag-product-badges.assignment.columnProductName"),allowResize:!0,primary:!0},{property:"product.productNumber",dataIndex:"product.productNumber",label:this.$t("swag-product-badges.assignment.columnProductNumber"),allowResize:!0},{property:"media",dataIndex:"media",label:this.$t("swag-product-badges.assignment.columnImage"),allowResize:!0,sortable:!1}]},selectedProducts(){return this.productCollection?Array.from(this.productCollection):[]},areAllImagesSelected(){if(!this.selectedProducts.length)return!1;let e=0;for(let t of this.selectedProducts)e+=this.getProductMedia(t).length;return e>0&&this.selectedImages.length===e}},async created(){this.assignmentRepository=this.repositoryFactory.create("swag_product_badge_product"),this.productRepository=this.repositoryFactory.create("product"),this.badgeRepository=this.repositoryFactory.create("swag_product_badge"),this.createEmptyProductCollection(),this.createProductCriteria(),await this.validateBadgeAndLoad()},methods:{areAllProductImagesSelected(e){let t=this.selectedProducts.find(t=>t.id===e);if(!t)return!1;let a=this.getProductMedia(t);return 0!==a.length&&this.selectedImages.filter(t=>t.productId===e).length===a.length},toggleAllImages(){if(this.areAllImagesSelected)this.selectedImages=[];else for(let e of(this.selectedImages=[],this.selectedProducts))for(let t of this.getProductMedia(e))this.selectedImages.push({productId:e.id,productVersionId:e.versionId,mediaId:t.id})},toggleAllProductImages(e){let t=this.selectedProducts.find(t=>t.id===e);if(!t)return;let a=this.getProductMedia(t);if(this.areAllProductImagesSelected(e))this.selectedImages=this.selectedImages.filter(t=>t.productId!==e);else for(let s of(this.selectedImages=this.selectedImages.filter(t=>t.productId!==e),a))this.selectedImages.push({productId:t.id,productVersionId:t.versionId,mediaId:s.id})},createEmptyProductCollection(){this.productCollection=new p(this.productRepository.route,this.productRepository.entityName,Shopware.Context.api)},clearProductCollection(){Array.from(this.productCollection).forEach(e=>{this.productCollection.remove(e.id)})},async validateBadgeAndLoad(){try{let e=new u;e.addFilter(u.equals("id",this.badgeId));let t=await this.badgeRepository.search(e,Shopware.Context.api);if(!t||0===t.length){console.error("Badge not found with ID:",this.badgeId),this.createNotificationError({title:"Badge Not Found",message:`Badge with ID ${this.badgeId} does not exist.`});return}this.currentBadge=t.first(),this.getAssignments()}catch(e){console.error("Error validating badge:",e),this.createNotificationError({title:"Validation Error",message:"Could not validate badge. Please check the console for details."})}},onSelectionChanged(e,t){this.selection=e,this.selectionCount=t},onBulkDeleteButtonClick(){0!==this.selectionCount&&(this.showBulkDeleteModal=!0)},onCloseBulkDeleteModal(){this.showBulkDeleteModal=!1},async onConfirmBulkDelete(){this.showBulkDeleteModal=!1;try{let e=Object.keys(this.selection).map(e=>this.onDeleteAssignment(e));await Promise.all(e),this.selection={},this.selectionCount=0,this.page=1,this.getAssignments(),this.$refs.assignmentGrid&&this.$refs.assignmentGrid.resetSelection()}catch(e){console.error("Error bulk deleting assignments:",e)}},onDeleteAssignment(e){this.assignmentRepository.delete(e,Shopware.Context.api).then(()=>{this.createNotificationSuccess({title:this.$t("swag-product-badges.assignment.titleUnassignSuccess"),message:this.$t("swag-product-badges.assignment.messageUnassignSuccess")}),this.getAssignments()}).catch(e=>{console.error("Delete assignment error:",e),this.createNotificationError({title:this.$t("swag-product-badges.assignment.titleUnassignError"),message:this.$t("swag-product-badges.assignment.messageUnassignError")})})},createProductCriteria(){this.productCriteria=new u,this.productCriteria.addAssociation("media"),this.productCriteria.addFilter(u.equals("active",!0)),this.productCriteria.addSorting(u.sort("name","ASC"))},onPageChange(e){this.page=e.page,this.limit=e.limit,this.getAssignments()},onRefresh(){this.page=1,this.getAssignments()},async getAssignments(){if(!this.currentBadge){console.warn("Cannot load assignments - badge not validated yet");return}this.isLoading=!0;let e=new u(this.page,this.limit);e.addFilter(u.equals("swagProductBadgeId",this.badgeId)),e.addAssociation("product"),e.addAssociation("media"),e.addSorting(u.sort("createdAt","DESC"));try{let t=await this.assignmentRepository.search(e,Shopware.Context.api);if(t&&t.length>0){let e=new Set;t.forEach(t=>{t.product&&t.product.parentId&&(!t.product.name||""===t.product.name.trim())&&e.add(t.product.parentId)});let a={};if(e.size>0){let t=new u;t.addFilter(u.equalsAny("id",Array.from(e))),(await this.productRepository.search(t,Shopware.Context.api)).forEach(e=>{a[e.id]=e})}t.forEach(e=>{if(e.product&&e.product.parentId&&(!e.product.name||""===e.product.name.trim())){let t=a[e.product.parentId];t&&(e.product.name=t.name||"",e.product.translated||(e.product.translated={}),t.translated&&t.translated.name?e.product.translated.name=t.translated.name:t.name&&(e.product.translated.name=t.name))}})}this.assignments=t,this.total=t.total}catch(e){console.error("Error loading assignments:",e),this.assignments=[],this.total=0}finally{this.isLoading=!1}},onAddProducts(){if(!this.currentBadge){this.createNotificationError({title:"Badge Not Ready",message:"Badge validation is still in progress. Please wait."});return}this.clearProductCollection(),this.showProductModal=!0},onCloseProductModal(){this.showProductModal=!1,this.clearProductCollection()},onUpdateProductCollection(e){this.productCollection=e},async onShowImageSelection(){if(!this.productCollection||0===this.productCollection.length){console.warn("No products selected"),this.createNotificationWarning({title:this.$t("swag-product-badges.assignment.titleNoSelection"),message:this.$t("swag-product-badges.assignment.messageNoSelection")||"Please select at least one product"});return}await this.loadProductMedia(),this.showProductModal=!1,this.showImageModal=!0},async loadProductMedia(){if(!this.productCollection||0===this.productCollection.length){console.warn("No selected products to load media for");return}let e=new u;e.addAssociation("media");let t=await this.assignmentRepository.search(e,Shopware.Context.api),a=new Set;t.forEach(e=>{e.productId&&e.mediaId&&e.swagProductBadgeId===this.badgeId&&a.add(`${e.productId}-${e.mediaId}`)});let s=Array.from(this.productCollection).map(e=>e.id),n=new Set;Array.from(this.productCollection).forEach(e=>{e.parentId&&(!e.name||""===e.name.trim())&&n.add(e.parentId)});let i={};if(n.size>0){let e=new u;e.addFilter(u.equalsAny("id",Array.from(n))),(await this.productRepository.search(e,Shopware.Context.api)).forEach(e=>{i[e.id]=e})}for(let e of(Array.from(this.productCollection).forEach(e=>{if(e.parentId&&(!e.name||""===e.name.trim())&&i[e.parentId]){let t=i[e.parentId];e.name=t.name||"",e.translated||(e.translated={}),t.translated&&t.translated.name?e.translated.name=t.translated.name:t.name&&(e.translated.name=t.name)}}),s))try{let t=new u;t.addAssociation("media");let s=await this.productRepository.get(e,Shopware.Context.api,t),n=[],i=!1;if(s&&s.media&&(Array.isArray(s.media)?n=s.media:s.media.elements?n=Object.values(s.media.elements):"object"==typeof s.media&&(n=Object.values(s.media)),i=n.length>0),!i&&s&&s.parentId)try{let e=new u;e.addAssociation("media");let t=await this.productRepository.get(s.parentId,Shopware.Context.api,e);t&&t.media&&(Array.isArray(t.media)?n=t.media:t.media.elements?n=Object.values(t.media.elements):"object"==typeof t.media&&(n=Object.values(t.media)))}catch(t){console.warn("Error loading parent product media for product:",e,t)}let o=[];for(let t of n)if(t&&t.media&&t.media.id){let s=`${e}-${t.media.id}`;a.has(s)||o.push({id:t.media.id,fileName:t.media.fileName||"Unknown",url:t.media.url||"",alt:t.media.alt||""})}this.productMediaData[e]=o}catch(t){console.error("Error loading media for product:",e,t),this.productMediaData[e]=[]}},getProductMedia(e){return this.productMediaData[e.id]||[]},onCloseImageModal(){this.showImageModal=!1,this.selectedImages=[],this.productMediaData={}},onBackToProductSelection(){this.showImageModal=!1,this.showProductModal=!0,this.selectedImages=[]},isImageSelected(e,t){return this.selectedImages.some(a=>a.productId===e&&a.mediaId===t)},toggleImageSelection(e,t){let a=this.selectedImages.findIndex(a=>a.productId===e&&a.mediaId===t);if(a>-1)this.selectedImages.splice(a,1);else{let a=this.selectedProducts.find(t=>t.id===e);a&&this.selectedImages.push({productId:e,productVersionId:a.versionId,mediaId:t})}},async onAssignProductsWithImages(){if(!this.currentBadge){this.createNotificationError({title:"Badge Not Ready",message:"Badge validation failed. Cannot create assignments."});return}if(0===this.selectedImages.length){this.createNotificationWarning({title:this.$t("swag-product-badges.assignment.titleNoImageSelection"),message:this.$t("swag-product-badges.assignment.messageNoImageSelection")||"Please select at least one image"});return}let e=[];for(let t of this.selectedImages){if(!t.productId){console.error("Missing productId for assignment:",t);continue}let a=null;if(t.mediaId)try{let e=this.repositoryFactory.create("media");await e.get(t.mediaId,Shopware.Context.api)?a=t.mediaId:console.warn("Media not found, setting to null:",t.mediaId)}catch(e){console.warn("Media validation failed, setting to null:",t.mediaId,e)}let s={productId:t.productId,productVersionId:t.productVersionId||"live",swagProductBadgeId:this.badgeId,mediaId:a};e.push(s)}if(0===e.length){this.createNotificationError({title:"Validation Error",message:"No valid assignments could be created. Please check your selection."});return}this.createAssignmentsSequentially(e)},async createAssignmentsSequentially(e){let t=[],a=[];for(let s of e)try{let e=new u;if(e.addFilter(u.equals("productId",s.productId)),e.addFilter(u.equals("swagProductBadgeId",s.swagProductBadgeId)),s.mediaId?e.addFilter(u.equals("mediaId",s.mediaId)):e.addFilter(u.equals("mediaId",null)),(await this.assignmentRepository.search(e,Shopware.Context.api)).length>0){a.push({assignment:s,error:"Assignment already exists"});continue}let n=this.assignmentRepository.create(Shopware.Context.api);n.productId=s.productId,n.productVersionId=s.productVersionId,n.swagProductBadgeId=s.swag,n.productId=s.productId,n.productVersionId=s.productVersionId,n.swagProductBadgeId=s.swagProductBadgeId,n.mediaId=s.mediaId,await this.assignmentRepository.save(n,Shopware.Context.api),t.push(s)}catch(e){console.error("Failed to create assignment:",s,e),a.push({assignment:s,error:e})}t.length>0&&(this.createNotificationSuccess({title:this.$t("swag-product-badges.assignment.titleAssignSuccess"),message:this.$t("swag-product-badges.assignment.descriptionAssignSuccess")+`${t.length} product(s) to badge.`}),this.getAssignments()),a.length>0&&(console.error("Failed assignments details:",a),this.createNotificationError({title:this.$t("swag-product-badges.assignment.titleAssignError"),message:this.$t("swag-product-badges.assignment.descriptionAssignError")})),t.length>0&&(this.onCloseImageModal(),this.onCloseProductModal())},onAssignProducts(){if(!this.currentBadge){this.createNotificationError({title:"Badge Not Ready",message:"Badge validation failed. Cannot create assignments."});return}if(!this.productCollection||0===this.productCollection.length){this.createNotificationWarning({title:this.$t("swag-product-badges.assignment.titleNoSelection"),message:this.$t("swag-product-badges.assignment.messageNoSelection")||"Please select at least one product"});return}let e=Array.from(this.productCollection).map(e=>({productId:e.id,productVersionId:e.versionId,swagProductBadgeId:this.badgeId,mediaId:null}));this.createAssignmentsSequentially(e)},onDeleteAssignment(e){this.assignmentRepository.delete(e,Shopware.Context.api).then(()=>{this.createNotificationSuccess({title:this.$t("swag-product-badges.assignment.titleUnassignSuccess"),message:this.$t("swag-product-badges.assignment.messageUnassignSuccess")}),this.getAssignments()}).catch(e=>{console.error("Delete assignment error:",e),this.createNotificationError({title:this.$t("swag-product-badges.assignment.titleUnassignError"),message:this.$t("swag-product-badges.assignment.messageUnassignError")})})}}});let{Module:m}=Shopware;m.register("swag-product-badges",{type:"plugin",name:"ProductBadges",title:"swag-product-badges.general.mainMenuItemGeneral",description:"swag-product-badges.general.descriptionTextModule",color:"#ff3d58",icon:"regular-cog",routes:{index:{component:"swag-product-badges-list",path:"index",meta:{parentPath:"sw.settings.index.plugins"}},detail:{component:"swag-product-badges-detail",path:"detail/:id",meta:{parentPath:"swag.product.badges.index"}},create:{component:"swag-product-badges-detail",path:"create",meta:{parentPath:"swag.product.badges.index"}}},settingsItem:[{name:"swag-product-badges",label:"swag-product-badges.general.mainMenuItemGeneral",to:"swag.product.badges.index",icon:"regular-cog",group:"plugins"}],navigation:[{id:"swag-product-badges",label:"swag-product-badges.general.mainMenuItemGeneral",parent:"sw-catalogue",path:"swag.product.badges.index",position:100,icon:"regular-cog"}]}),Shopware.Component.override("sw-product-detail",{template:"{% block sw_product_detail_content_tabs_reviews %}\n    {% parent %}\n\n    <sw-tabs-item\n        :route=\"{ name: 'sw.product.detail.badges', params: { id: $route.params.id } }\"\n        :title=\"$tc('swag-product-badges.productDetail.tabTitle')\"\n    >\n        {{ $tc('swag-product-badges.productDetail.tabTitle') }}\n    </sw-tabs-item>\n{% endblock %}\n"}),a(426);let{Mixin:h}=Shopware;Shopware.Component.register("sw-product-detail-badges",{template:'<sw-card \n    :title="$tc(\'swag-product-badges.productDetail.tabTitle\')" \n    :isLoading="isLoading"\n    class="swag-product-detail-badges"\n>\n    {% block swag_product_detail_badges_header %}\n        <template #toolbar>\n            <sw-button \n                @click="onAddBadge"\n                variant="primary"\n                size="small">\n                {{ $tc(\'swag-product-badges.productDetail.buttonAddBadge\') }}\n            </sw-button>\n        </template>\n    {% endblock %}\n\n    <template v-if="isLoading">\n        <sw-skeleton />\n        <sw-skeleton />\n    </template>\n\n    <template v-else>\n        <sw-data-grid\n            v-if="badges.length > 0"\n            :dataSource="badges"\n            :columns="columns"\n            :showSelection="false"\n            :showActions="true"\n            :isLoading="isLoading"\n        >\n            <template #column-image="{ item }">\n                <div class="swag-product-detail-badges__image-wrapper">\n                    <sw-media-preview-v2 :source="item.image" />\n                </div>\n            </template>\n\n            <template #column-productImage="{ item }">\n                <div class="swag-product-detail-badges__image-wrapper">\n                    <sw-media-preview-v2 \n                        v-if="item.productImage" \n                        :source="item.productImage" \n                    />\n                    <span v-else>\n                        {{ $tc(\'swag-product-badges.productDetail.noCover\') }}\n                    </span>\n                </div>\n            </template>\n\n            <template #column-label="{ item }">\n                {{ item.label || item.name }}\n            </template>\n\n            <template #column-active="{ item }">\n                <sw-icon\n                    v-if="item.active"\n                    name="regular-checkmark-xs"\n                    small\n                    class="is--active"\n                />\n                <sw-icon\n                    v-else\n                    name="regular-times-s"\n                    small\n                    class="is--inactive"\n                />\n            </template>\n\n            <template #column-createdAt="{ item }">\n                {{ dateFilter(item.createdAt) }}\n            </template>\n\n            {% block swag_product_detail_badges_actions %}\n                <template #actions="{ item }">\n                    <sw-context-menu-item \n                        @click="onRemoveBadge(item)"\n                        variant="danger">\n                        {{ $tc(\'swag-product-badges.productDetail.contextMenuRemove\') }}\n                    </sw-context-menu-item>\n                </template>\n            {% endblock %}\n        </sw-data-grid>\n\n        <sw-empty-state\n            v-else\n            :title="$tc(\'swag-product-badges.productDetail.emptyTitle\')"\n            :subline="$tc(\'swag-product-badges.productDetail.emptySubline\')"\n        />\n    </template>\n\n    {% block swag_product_detail_badges_add_modal %}\n        <sw-modal \n            v-if="showAddBadgeModal"\n            @modal-close="onCloseAddBadgeModal"\n            :title="$tc(\'swag-product-badges.productDetail.modalTitleAddBadge\')"\n            variant="large"\n            class="swag-product-badge-product-tab-modal">\n            \n            {% block swag_product_detail_badges_add_modal_content %}\n                <div class="swag-product-badges-add-modal">\n                    <sw-data-grid\n                        v-if="badgeProductCombinations.length > 0"\n                        :dataSource="badgeProductCombinations"\n                        :columns="modalColumns"\n                        :showSelection="false"\n                        :showActions="false"\n                        :isLoading="false"\n                        class="swag-product-badges-add-modal__grid"\n                    >\n                        <template #column-badgeName="{ item }">\n                            {{ item.badgeName }}\n                        </template>\n\n                        <template #column-badgeImage="{ item }">\n                            <div class="swag-product-badges-add-modal__image">\n                                <sw-media-preview-v2 \n                                    v-if="item.badgeImage" \n                                    :source="item.badgeImage" \n                                />\n                                <div v-else class="swag-product-badges-add-modal__no-image">\n                                    {{ $tc(\'swag-product-badges.productDetail.noImage\') }}\n                                </div>\n                            </div>\n                        </template>\n\n                        <template #column-productImage="{ item }">\n                            <div class="swag-product-badges-add-modal__image">\n                                <sw-media-preview-v2 \n                                    v-if="item.productImage" \n                                    :source="item.productImage.media" \n                                />\n                                <div v-else class="swag-product-badges-add-modal__no-image">\n                                    {{ $tc(\'swag-product-badges.productDetail.noSpecificImage\') }}\n                                </div>\n                            </div>\n                        </template>\n\n                        <template #column-actions="{ item }">\n                            <sw-button \n                                @click="onAssignBadge(item)"\n                                variant="primary"\n                                size="small">\n                                {{ $tc(\'swag-product-badges.productDetail.buttonAssign\') }}\n                            </sw-button>\n                        </template>\n                    </sw-data-grid>\n\n                    <sw-empty-state\n                        v-else\n                        :title="$tc(\'swag-product-badges.productDetail.modal.emptyTitle\')"\n                        :subline="$tc(\'swag-product-badges.productDetail.modal.emptySubline\')"\n                    />\n                </div>\n            {% endblock %}\n\n            {% block swag_product_detail_badges_add_modal_footer %}\n                <template #modal-footer>\n                    <sw-button @click="onCloseAddBadgeModal" size="small">\n                        {{ $tc(\'swag-product-badges.productDetail.buttonCancel\') }}\n                    </sw-button>\n                </template>\n            {% endblock %}\n        </sw-modal>\n    {% endblock %}\n</sw-card>\n',inject:["ProductBadgeApiService","repositoryFactory"],mixins:[h.getByName("notification")],data(){return{badges:[],availableBadges:[],isLoading:!1,showAddBadgeModal:!1,productImages:[],badgeProductCombinations:[],columns:[{property:"image",label:this.$t("swag-product-badges.productDetail.columns.badgeImage"),allowResize:!0},{property:"productImage",label:this.$t("swag-product-badges.productDetail.columns.productImage"),allowResize:!0},{property:"label",label:this.$t("swag-product-badges.productDetail.columns.label"),allowResize:!0},{property:"active",label:this.$t("swag-product-badges.productDetail.columns.active"),allowResize:!0,align:"center"},{property:"createdAt",label:this.$t("swag-product-badges.productDetail.columns.createdAt"),allowResize:!0}],modalColumns:[{property:"badgeName",label:this.$t("swag-product-badges.productDetail.modal.columnBadgeName"),allowResize:!0},{property:"badgeImage",label:this.$t("swag-product-badges.productDetail.modal.columnBadgeImage"),allowResize:!0},{property:"productImage",label:this.$t("swag-product-badges.productDetail.modal.columnProductImage"),allowResize:!0},{property:"actions",label:this.$t("swag-product-badges.productDetail.modal.columnActions"),allowResize:!0}]}},created(){this.loadBadges(),this.loadProductImages()},computed:{dateFilter(){return Shopware.Filter.getByName("date")},productId(){return this.$route.params.id}},methods:{loadBadges(){this.isLoading=!0,this.ProductBadgeApiService.getBadgesForProduct(this.productId).then(e=>{this.badges=e.data}).catch(e=>{console.error("Error loading badges:",e)}).finally(()=>{this.isLoading=!1})},async loadAvailableBadges(){try{let e=await this.ProductBadgeApiService.searchBadges({active:!0},{limit:100});this.availableBadges=e.data||[],await this.createBadgeProductCombinations()}catch(e){console.error("Error loading available badges:",e)}},async loadProductImages(){let e=this.repositoryFactory.create("product"),t=new Shopware.Data.Criteria;t.addAssociation("media");try{let a=await e.get(this.productId,Shopware.Context.api,t);this.productImages=a.media||[]}catch(e){console.error("Error loading product images:",e)}},async getExistingAssignments(){try{return(await this.ProductBadgeApiService.getBadgesForProduct(this.productId)).data||[]}catch(e){return console.error("Error loading existing assignments:",e),[]}},async onAddBadge(){await this.loadAvailableBadges(),this.showAddBadgeModal=!0},onCloseAddBadgeModal(){this.showAddBadgeModal=!1,this.badgeProductCombinations=[]},async createBadgeProductCombinations(){let e=await this.getExistingAssignments(),t=new Set;e.forEach(e=>{let a=e.mediaId||e.productImage?.id,s=e.id||e.swagProductBadgeId;a&&"null"!==a&&s&&t.add(`${s}-${a}`)}),this.badgeProductCombinations=[],this.availableBadges.forEach(e=>{this.productImages.forEach(a=>{let s=a.media.id,n=`${e.id}-${s}`;t.has(n)||this.badgeProductCombinations.push({id:n,badge:e,productImage:a,badgeName:e.name,badgeImage:e.image})})})},async onAssignBadge(e){try{let t=this.repositoryFactory.create("product"),a=(await t.get(this.productId,Shopware.Context.api)).versionId;await this.ProductBadgeApiService.assignBadgeToProduct(this.productId,a,e.badge.id,e.productImage?.media?.id||null),this.createNotificationSuccess({title:this.$t("swag-product-badges.assignment.titleAssignSuccess"),message:this.$t("swag-product-badges.assignment.descriptionAssignSuccess")});let s=e.id;this.badgeProductCombinations=this.badgeProductCombinations.filter(e=>e.id!==s),this.loadBadges()}catch(e){console.error("Error assigning badge:",e),this.createNotificationError({title:"Error",message:"Could not assign badge"})}},async onRemoveBadge(e){try{await this.ProductBadgeApiService.removeBadgeFromProduct(this.productId,e.id||e.swagProductBadgeId,e.productImage?.id||e.mediaId||null),this.createNotificationSuccess({title:this.$t("swag-product-badges.assignment.titleUnassignSuccess"),message:this.$t("swag-product-badges.assignment.messageUnassignSuccess")}),this.loadBadges()}catch(e){console.error("Error removing badge:",e),this.createNotificationError({title:"Error",message:"Could not remove badge"})}}}}),Shopware.Module.register("sw-product-detail-badges",{routeMiddleware(e,t){"sw.product.detail"===t.name&&t.children.push({name:"sw.product.detail.badges",path:"/sw/product/detail/:id/badges",component:"sw-product-detail-badges",meta:{parentPath:"sw.product.index"}}),e(t)}})}()})();
//# sourceMappingURL=swag-product-badges.js.map